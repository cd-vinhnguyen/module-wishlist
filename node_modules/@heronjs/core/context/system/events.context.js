"use strict";
var _EventContext_events, _EventContext_eHandler;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventContext = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@heronjs/common");
const rxjs_1 = require("rxjs");
class EventContext {
    constructor() {
        _EventContext_events.set(this, {});
        this.handler = (name) => tslib_1.__classPrivateFieldGet(this, _EventContext_events, "f")[name];
        this.register = (name) => {
            if (!tslib_1.__classPrivateFieldGet(this, _EventContext_events, "f")[name])
                tslib_1.__classPrivateFieldGet(this, _EventContext_events, "f")[name] = tslib_1.__classPrivateFieldGet(this, _EventContext_eHandler, "f").call(this, name, () => {
                    delete tslib_1.__classPrivateFieldGet(this, _EventContext_events, "f")[name];
                });
            return tslib_1.__classPrivateFieldGet(this, _EventContext_events, "f")[name];
        };
        _EventContext_eHandler.set(this, (name, cleanup) => {
            const subjects = {};
            const DESTROY_EVENT_NAME = '$destroy_';
            const createEvent = (name) => {
                return `$${name}_`;
            };
            const getEventHandler = (name) => {
                const event = createEvent(name);
                return subjects[event] || (subjects[event] = new rxjs_1.Subject());
            };
            return {
                emit(name, data) {
                    const eventHandler = getEventHandler(name);
                    eventHandler && eventHandler.next(data);
                },
                listen(name, handler) {
                    const eventHandler = getEventHandler(name);
                    eventHandler && eventHandler.subscribe(handler);
                },
                dispose() {
                    for (const prop in subjects) {
                        if (subjects.hasOwnProperty(prop)) {
                            try {
                                (prop === DESTROY_EVENT_NAME) && subjects[prop].next({});
                                subjects[prop].unsubscribe();
                            }
                            catch (error) {
                                throw new common_1.EventBusError(common_1.EVNErrors.MESSAGE_REJECT_ERR, 'failed to sending message on disposed event!');
                            }
                        }
                    }
                    cleanup();
                }
            };
        });
    }
}
exports.EventContext = EventContext;
_EventContext_events = new WeakMap(), _EventContext_eHandler = new WeakMap();
