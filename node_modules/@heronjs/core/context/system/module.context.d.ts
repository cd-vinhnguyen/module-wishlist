import { Context } from '../context';
import { RootApplication } from '../../app';
import { Optional } from '@heronjs/common/consts';
import { ModuleDI } from '../../di';
import { Any, SecureContext, Type } from '@heronjs/common';
import { SecureProperty } from '@heronjs/common/secure';
export declare abstract class ModuleContext implements Context {
    #private;
    private ctxModule;
    protected isInit: boolean;
    protected root: Optional<RootApplication>;
    protected constructor(ctxModule: Any);
    get di(): Optional<ModuleDI>;
    set di(value: Optional<ModuleDI>);
    get gatekeeper(): Optional<Type<SecureContext<Any, SecureProperty>>>;
    set gatekeeper(value: Optional<Type<SecureContext<Any, SecureProperty>>>);
    get: () => Context;
    init: () => Promise<Any>;
    uid: () => string;
    protected callShutdownHook: (signal?: string) => Promise<void>;
}
