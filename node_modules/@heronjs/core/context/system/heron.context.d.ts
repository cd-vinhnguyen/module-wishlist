import { GraphQLServer, HttpServer, WebSocketServer } from '../../server';
import { ContextConfig } from '../../consts';
import { ModuleContext } from './module.context';
import { ApplicationContext } from './application.context';
import { Context } from '../context';
export declare class HeronContext extends ModuleContext implements ApplicationContext {
    #private;
    protected readonly _module: any;
    protected readonly httpServer: HttpServer;
    protected readonly wsServer?: WebSocketServer | undefined;
    protected readonly graphServer?: GraphQLServer | undefined;
    constructor(_module: any, httpServer: HttpServer, wsServer?: WebSocketServer | undefined, graphServer?: GraphQLServer | undefined);
    get: () => Context;
    modules: () => Set<ApplicationContext>;
    listen: (obj?: ContextConfig) => Promise<void>;
    context(): ApplicationContext;
    bootstrap: () => Promise<void>;
}
