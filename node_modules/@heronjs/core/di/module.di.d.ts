import { Container } from 'inversify';
import { Scope } from '@heronjs/common/enums';
import { IModuleDI } from '@heronjs/common';
import { FactoryBindingInstance } from '@heronjs/common/di/di.interface';
export declare class ModuleDI implements IModuleDI {
    #private;
    private readonly _container;
    constructor(_container: Container);
    __resolve: <T>(target: any) => T;
    __getTarget: <T>(target: any) => T;
    __get: <T>(args: {
        token: string;
        named?: string;
    }) => T;
    __self: <T>(target: any) => any;
    __selfWithScope: <T>(target: any, scope: Scope) => any;
    __selfValue: <T>(target: any) => void;
    __constantValue: <T>(args: {
        token: string;
        value: T;
        named?: string | undefined;
        isDefault?: boolean | undefined;
    }) => void;
    __binding: <T>(target: any, scope: Scope, token?: string) => any;
    __bindingWithDefault: <T>(target: any, scope: Scope, token: string, isDefault?: boolean) => void;
    __factoryBinding: <T>(token: string, factoryObjects: FactoryBindingInstance[]) => void;
}
