"use strict";
var _ModuleDI_logger, _ModuleDI_bindWithToken, _ModuleDI_resolveMiddleware, _ModuleDI_isBound, _ModuleDI_apply;
var ModuleDI_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleDI = void 0;
const tslib_1 = require("tslib");
const inversify_1 = require("inversify");
const enums_1 = require("@heronjs/common/enums");
const common_1 = require("@heronjs/common");
const errors_1 = require("@heronjs/common/errors");
const consts_1 = require("@heronjs/common/consts");
let ModuleDI = ModuleDI_1 = class ModuleDI {
    constructor(_container) {
        this._container = _container;
        _ModuleDI_logger.set(this, new common_1.Logger(ModuleDI_1.name));
        this.__resolve = (target) => this._container.resolve(target);
        this.__getTarget = (target) => {
            try {
                return this._container.get(target);
            }
            catch (e) {
                (e instanceof Error) && tslib_1.__classPrivateFieldGet(this, _ModuleDI_logger, "f").fatal(e.message, e);
                (0, consts_1.rethrow)(e);
            }
        };
        this.__get = (args) => {
            try {
                const { token, named } = args;
                const key = Symbol.for(token);
                return named ? this._container.getNamed(key, named) : this._container.get(key);
            }
            catch (e) {
                (e instanceof Error) && tslib_1.__classPrivateFieldGet(this, _ModuleDI_logger, "f").fatal(e.message, e);
                (0, consts_1.rethrow)(e);
            }
        };
        this.__self = (target) => tslib_1.__classPrivateFieldGet(this, _ModuleDI_isBound, "f").call(this, target, (instance) => {
            this._container.bind(instance).toSelf().inSingletonScope();
            return true;
        });
        this.__selfWithScope = (target, scope) => tslib_1.__classPrivateFieldGet(this, _ModuleDI_isBound, "f").call(this, target, (instance) => {
            switch (scope) {
                case enums_1.Scope.REQUEST:
                    this._container.bind(instance).toSelf().inRequestScope();
                    break;
                case enums_1.Scope.TRANSIENT:
                    this._container.bind(instance).toSelf().inTransientScope();
                    break;
                case enums_1.Scope.SINGLETON:
                    this._container.bind(instance).toSelf().inSingletonScope();
                    break;
            }
            return true;
        });
        this.__selfValue = (target) => {
            const sym = Symbol.for(target.name);
            this._container.bind(sym).toConstantValue(target);
        };
        this.__constantValue = (args) => {
            args.named
                ? (args.isDefault ? (this._container.bind(Symbol.for(args.token)).toConstantValue(args.value).whenTargetIsDefault()
                    && this._container.bind(Symbol.for(args.token)).toConstantValue(args.value).whenTargetNamed(args.named)) : this._container.bind(Symbol.for(args.token)).toConstantValue(args.value).whenTargetNamed(args.named))
                : this._container.bind(Symbol.for(args.token)).toConstantValue(args.value);
        };
        this.__binding = (target, scope, token) => tslib_1.__classPrivateFieldGet(this, _ModuleDI_isBound, "f").call(this, target, (instance) => tslib_1.__classPrivateFieldGet(this, _ModuleDI_bindWithToken, "f").call(this, token ? token : instance.name, instance, scope));
        this.__bindingWithDefault = (target, scope, token, isDefault) => {
            isDefault
                ? (tslib_1.__classPrivateFieldGet(this, _ModuleDI_bindWithToken, "f").call(this, token, target, scope).whenTargetIsDefault() && tslib_1.__classPrivateFieldGet(this, _ModuleDI_bindWithToken, "f").call(this, token, target, scope).whenTargetNamed(target.name))
                : tslib_1.__classPrivateFieldGet(this, _ModuleDI_bindWithToken, "f").call(this, token, target, scope).whenTargetNamed(target.name);
        };
        this.__factoryBinding = (token, factoryObjects) => {
            const factoryName = Symbol.for(`Factory<${token}>`);
            factoryObjects.forEach(fo => {
                const bounded = this._container.bind(Symbol.for(token)).to(fo.instance);
                if (fo.isDefault)
                    bounded.whenTargetIsDefault();
                bounded.whenTargetNamed(Symbol.for(fo.name));
            });
            this._container.bind(factoryName).toFactory((context) => {
                return (named) => {
                    return named ? context.container.getNamed(Symbol.for(token), Symbol.for(named)) : context.container.get(Symbol.for(token));
                };
            });
        };
        _ModuleDI_bindWithToken.set(this, (token, target, scope) => {
            const sym = (0, common_1.isString)(token) ? Symbol.for(token) : token;
            switch (scope) {
                case enums_1.Scope.REQUEST:
                    return this._container.bind(sym).to(target).inRequestScope();
                case enums_1.Scope.SINGLETON:
                    return this._container.bind(sym).to(target).inSingletonScope();
                case enums_1.Scope.TRANSIENT:
                    return this._container.bind(sym).to(target).inTransientScope();
            }
        });
        _ModuleDI_resolveMiddleware.set(this, (planAndResolve) => (args) => planAndResolve(args));
        _ModuleDI_isBound.set(this, (target, callback) => {
            const bound = this._container.isBound(target);
            if (!bound) {
                return callback(target);
            }
            else
                throw new errors_1.ModuleError(common_1.SYSErrors.MODULE_ERR, `${target.name} was already bound to the container`);
        });
        _ModuleDI_apply.set(this, (...middlewares) => {
            for (const mw of middlewares) {
                this._container.applyMiddleware(mw);
            }
        });
        tslib_1.__classPrivateFieldGet(this, _ModuleDI_apply, "f").call(this, tslib_1.__classPrivateFieldGet(this, _ModuleDI_resolveMiddleware, "f"));
    }
};
_ModuleDI_logger = new WeakMap(), _ModuleDI_bindWithToken = new WeakMap(), _ModuleDI_resolveMiddleware = new WeakMap(), _ModuleDI_isBound = new WeakMap(), _ModuleDI_apply = new WeakMap();
ModuleDI = ModuleDI_1 = tslib_1.__decorate([
    (0, common_1.Sealed)(),
    tslib_1.__metadata("design:paramtypes", [inversify_1.Container])
], ModuleDI);
exports.ModuleDI = ModuleDI;
