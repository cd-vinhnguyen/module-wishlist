"use strict";
var _AbstractKnexDatabaseTenancyClient_super, _AbstractKnexDatabaseTenancyClient_connectors, _AbstractKnexDatabaseTenancyClient_database, _AbstractKnexDatabaseTenancyClient_knexConnector, _AbstractKnexDatabaseTenancyClient_fromConnectionString, _AbstractKnexDatabaseTenancyClient_connect, _AbstractKnexDatabaseTenancyClient_init, _AbstractKnexDatabaseTenancyClient_getDatabaseId, _AbstractKnexDatabaseTenancyClient_store;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractKnexDatabaseTenancyClient = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@heronjs/common");
const consts_1 = require("@heronjs/common/consts");
const errors_1 = require("@heronjs/common/errors");
const knex_1 = require("../knex");
const declarations_1 = require("@heronjs/common/declarations");
const messages_consts_1 = require("@heronjs/common/consts/messages.consts");
let AbstractKnexDatabaseTenancyClient = class AbstractKnexDatabaseTenancyClient {
    constructor() {
        _AbstractKnexDatabaseTenancyClient_super.set(this, this.constructor);
        _AbstractKnexDatabaseTenancyClient_connectors.set(this, new common_1.LimitedMap(common_1.DEFAULT_LIMITED_MAP_VALUE));
        _AbstractKnexDatabaseTenancyClient_database.set(this, void 0);
        _AbstractKnexDatabaseTenancyClient_knexConnector.set(this, void 0);
        _AbstractKnexDatabaseTenancyClient_fromConnectionString.set(this, (name) => {
            let swap;
            if (this.config) {
                const { config: current } = this.config;
                if (current) {
                    let slaves = '';
                    if (current.cluster?.slaves) {
                        const dbConfigs = (0, common_1.fromConnectionString)(current?.cluster?.slaves)?.map((connection) => {
                            connection.config.database = name;
                            return connection;
                        });
                        slaves = dbConfigs.reduce((prev, current, index) => {
                            const config = current.config;
                            const conn = `tcp://${config.host}:${config.port}?user=${config.user}&password=${config.password}&database=${config.database}`;
                            return index === 0 ? conn : prev + ';' + conn;
                        }, '');
                    }
                    swap = { ...current, database: name, cluster: { slaves } };
                }
            }
            return swap;
        });
        _AbstractKnexDatabaseTenancyClient_connect.set(this, (databaseConfig) => {
            let dbInstance;
            if (databaseConfig) {
                const { client, config } = databaseConfig;
                const { database, host, port } = config;
                const opaqueId = (0, common_1.Base64OpaqueId)(`${client}|${host}:${port}/${database}`);
                let db = tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_connectors, "f").get(opaqueId);
                if (!db) {
                    const newConnection = new knex_1.KnexConnector(databaseConfig);
                    if (newConnection) {
                        newConnection.connect();
                        db = newConnection.get();
                        tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_store, "f").call(this, [opaqueId, db]);
                    }
                }
                dbInstance = db;
            }
            return dbInstance;
        });
        _AbstractKnexDatabaseTenancyClient_init.set(this, (config) => {
            if (!tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_knexConnector, "f"))
                tslib_1.__classPrivateFieldSet(this, _AbstractKnexDatabaseTenancyClient_knexConnector, new knex_1.KnexConnector(config), "f");
            tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_knexConnector, "f").connect();
            tslib_1.__classPrivateFieldSet(this, _AbstractKnexDatabaseTenancyClient_database, tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_knexConnector, "f").get(), "f");
            const defaultDatabaseId = tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_getDatabaseId, "f").call(this, config);
            tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_store, "f").call(this, [defaultDatabaseId, tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_database, "f")]);
        });
        _AbstractKnexDatabaseTenancyClient_getDatabaseId.set(this, (cfg) => {
            let opaqueId;
            if (cfg) {
                const { client, config } = cfg;
                const { database, host, port } = config;
                opaqueId = (0, common_1.Base64OpaqueId)(`${client}|${host}:${port}/${database}`);
            }
            return opaqueId;
        });
        _AbstractKnexDatabaseTenancyClient_store.set(this, (database) => {
            const [id, db] = database;
            if (id && db) {
                tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_connectors, "f").put(id, db);
            }
        });
        const config = (0, common_1.__obtain)(declarations_1.SELF_CONFIG, tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_super, "f"));
        if (!config)
            throw new errors_1.ModuleError(consts_1.SYSErrors.MODULE_ERR, (0, messages_consts_1.CREATE_DATABASE_CONNECTION_FAILED)(config));
        tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_init, "f").call(this, config);
    }
    context() {
        return this;
    }
    database(databaseConfig) {
        let dbInstance;
        if (databaseConfig) {
            if ((0, common_1.isString)(databaseConfig)) {
                const swapDatabaseConfig = tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_fromConnectionString, "f").call(this, databaseConfig);
                dbInstance = tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_connect, "f").call(this, { ...this.config, config: swapDatabaseConfig });
            }
            else {
                if (databaseConfig.config) {
                    dbInstance = tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_connect, "f").call(this, { ...this.config, config: { ...databaseConfig.config } });
                }
            }
        }
        else {
            dbInstance = tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseTenancyClient_database, "f");
        }
        return dbInstance;
    }
};
_AbstractKnexDatabaseTenancyClient_super = new WeakMap(), _AbstractKnexDatabaseTenancyClient_connectors = new WeakMap(), _AbstractKnexDatabaseTenancyClient_database = new WeakMap(), _AbstractKnexDatabaseTenancyClient_knexConnector = new WeakMap(), _AbstractKnexDatabaseTenancyClient_fromConnectionString = new WeakMap(), _AbstractKnexDatabaseTenancyClient_connect = new WeakMap(), _AbstractKnexDatabaseTenancyClient_init = new WeakMap(), _AbstractKnexDatabaseTenancyClient_getDatabaseId = new WeakMap(), _AbstractKnexDatabaseTenancyClient_store = new WeakMap();
AbstractKnexDatabaseTenancyClient = tslib_1.__decorate([
    (0, common_1.Provider)(),
    tslib_1.__metadata("design:paramtypes", [])
], AbstractKnexDatabaseTenancyClient);
exports.AbstractKnexDatabaseTenancyClient = AbstractKnexDatabaseTenancyClient;
