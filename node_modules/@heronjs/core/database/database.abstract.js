"use strict";
var _AbstractKnexDatabaseClient_database, _AbstractKnexDatabaseClient_super, _AbstractKnexDatabaseClient_knexConnector, _AbstractDatabaseClient_database, _AbstractDatabaseClient_super, _AbstractDatabaseClient_config, _AbstractDatabaseClient_connector;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractDatabaseClient = exports.AbstractKnexDatabaseClient = void 0;
const tslib_1 = require("tslib");
const consts_1 = require("@heronjs/common/consts");
const common_1 = require("@heronjs/common");
const knex_1 = require("./knex");
const reflector_1 = require("@heronjs/common/reflector");
const declarations_1 = require("@heronjs/common/declarations");
const errors_1 = require("@heronjs/common/errors");
let AbstractKnexDatabaseClient = class AbstractKnexDatabaseClient {
    constructor() {
        _AbstractKnexDatabaseClient_database.set(this, void 0);
        _AbstractKnexDatabaseClient_super.set(this, this.constructor);
        _AbstractKnexDatabaseClient_knexConnector.set(this, void 0);
        const config = (0, reflector_1.__obtain)(declarations_1.SELF_CONFIG, tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseClient_super, "f"));
        if (!config)
            throw new errors_1.ModuleError(consts_1.SYSErrors.MODULE_ERR, (0, consts_1.CREATE_DATABASE_CONNECTION_FAILED)(config));
        if (!tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseClient_knexConnector, "f"))
            tslib_1.__classPrivateFieldSet(this, _AbstractKnexDatabaseClient_knexConnector, new knex_1.KnexConnector(config), "f");
        tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseClient_knexConnector, "f").connect();
        tslib_1.__classPrivateFieldSet(this, _AbstractKnexDatabaseClient_database, tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseClient_knexConnector, "f").get(), "f");
    }
    context() {
        return this;
    }
    database() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractKnexDatabaseClient_database, "f");
    }
};
_AbstractKnexDatabaseClient_database = new WeakMap(), _AbstractKnexDatabaseClient_super = new WeakMap(), _AbstractKnexDatabaseClient_knexConnector = new WeakMap();
AbstractKnexDatabaseClient = tslib_1.__decorate([
    (0, common_1.Provider)(),
    tslib_1.__metadata("design:paramtypes", [])
], AbstractKnexDatabaseClient);
exports.AbstractKnexDatabaseClient = AbstractKnexDatabaseClient;
let AbstractDatabaseClient = class AbstractDatabaseClient {
    constructor() {
        _AbstractDatabaseClient_database.set(this, void 0);
        _AbstractDatabaseClient_super.set(this, this.constructor);
        _AbstractDatabaseClient_config.set(this, void 0);
        _AbstractDatabaseClient_connector.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _AbstractDatabaseClient_config, (0, reflector_1.__obtain)(declarations_1.SELF_CONFIG, tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_super, "f")), "f");
        if (!tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_config, "f"))
            throw new errors_1.ModuleError(consts_1.SYSErrors.MODULE_ERR, (0, consts_1.CREATE_DATABASE_CONNECTION_FAILED)(`config ${tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_config, "f")}`));
        tslib_1.__classPrivateFieldSet(this, _AbstractDatabaseClient_connector, this.init(), "f");
        if (!tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_connector, "f")) {
            throw new errors_1.ModuleError(consts_1.SYSErrors.MODULE_ERR, (0, consts_1.CREATE_DATABASE_CONNECTION_FAILED)(`connector ${tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_connector, "f")}`));
        }
        tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_connector, "f").connect();
        tslib_1.__classPrivateFieldSet(this, _AbstractDatabaseClient_database, tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_connector, "f").get(), "f");
    }
    context() {
        return this;
    }
    database() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractDatabaseClient_database, "f");
    }
};
_AbstractDatabaseClient_database = new WeakMap(), _AbstractDatabaseClient_super = new WeakMap(), _AbstractDatabaseClient_config = new WeakMap(), _AbstractDatabaseClient_connector = new WeakMap();
AbstractDatabaseClient = tslib_1.__decorate([
    (0, common_1.Provider)(),
    tslib_1.__metadata("design:paramtypes", [])
], AbstractDatabaseClient);
exports.AbstractDatabaseClient = AbstractDatabaseClient;
