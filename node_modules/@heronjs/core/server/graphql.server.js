"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLServer = void 0;
const abstract_server_1 = require("./abstract.server");
const declarations_1 = require("@heronjs/common/declarations");
const consts_1 = require("@heronjs/common/consts");
const reflector_1 = require("@heronjs/common/reflector");
class GraphQLServer extends abstract_server_1.AbstractServer {
    constructor(_adapter) {
        super(GraphQLServer.name);
        this._adapter = _adapter;
        this.listen = async (options) => {
            if (!this.isInit) {
                await this._adapter?.listen(options);
                this.isInit = true;
            }
        };
        this.bind = (_context) => {
            this.di = _context.di;
            this._gatekeeper = _context.gatekeeper;
            return this;
        };
        this.connect = async (args) => {
            args && this._adapter?.bind(args);
            return this;
        };
        this.extension = (values) => {
            return (this._adapter && this._adapter['extension']) && this._adapter?.extension(values);
        };
        this.combine = async (server) => {
            return (this._adapter && this._adapter.combine) && this._adapter.combine(server);
        };
        this.register = async (controller) => {
            const [type, resolvers, behaviors, guards, caches] = (0, reflector_1.__obtains)([declarations_1.GRAPHQL_TYPES, declarations_1.GRAPHQL_RESOLVERS, declarations_1.OBJECT_FUNCTIONS, declarations_1.CTRL_GUARD, declarations_1.APP_CACHES], controller);
            if (this._adapter) {
                if (!resolvers) {
                    this._logger.error((0, consts_1.CAN_NOT_REGISTER_CONTROLLER)(controller.name));
                    return;
                }
                const holder = this.di?.__getTarget(controller);
                const actors = resolvers.map((resolver) => {
                    const { key, record, parameters, behaviors } = resolver;
                    const guard = guards ? guards[key] || guards[controller.name] : undefined;
                    const cache = caches?.find((x) => x.key === resolver.key);
                    const actor = {
                        record: { data: record, behaviors, parameters, key, cache: cache?.value }, guard
                    };
                    return Object.freeze(actor);
                });
                const metaBuilder = {
                    metas: {
                        actors, behaviors, guards, holder, prefix: '/', scheme: type
                    }
                };
                await this._adapter.build(metaBuilder);
            }
        };
    }
}
exports.GraphQLServer = GraphQLServer;
