import { AdapterExtension, Any, HttpAdapter, Interceptor, Listener, Registrable, ServerOptions } from '@heronjs/common';
import { HeronContext } from '../context';
import { AbstractServer } from './abstract.server';
import { Cache } from 'cache-manager';
export declare class HttpServer extends AbstractServer implements Registrable<Any, Any>, Listener<ServerOptions, void> {
    #private;
    private readonly _adapter?;
    constructor(_adapter?: HttpAdapter<Interceptor, any> | undefined);
    bind: (_context: HeronContext) => this;
    extension: (values: AdapterExtension<Cache, Any>) => Promise<any> | undefined;
    listen: (serverOptions?: ServerOptions) => Promise<void>;
    engine: () => Promise<Any>;
    register: (controller: Any) => Promise<void>;
    getAdapterWorker: () => Promise<Any>;
}
