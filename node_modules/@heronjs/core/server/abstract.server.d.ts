import { Any, GuardContext, Interceptor, Logger, Optional, SecureContext, SecureProperty, Type } from '@heronjs/common';
import { ModuleDI } from '../di';
import { HeronContext } from '../context';
export declare abstract class AbstractServer {
    private readonly _serverName;
    protected readonly _logger: Logger;
    protected isInit: boolean;
    protected di: Optional<ModuleDI>;
    protected _gatekeeper?: Type<SecureContext<Any, SecureProperty>>;
    protected constructor(_serverName: string);
    protected _context?: HeronContext;
    get context(): HeronContext;
    set context(value: HeronContext);
    abstract bind(_context: HeronContext): Any;
    protected __guardInterceptor: (_gatekeeper: Type<SecureContext<Any, SecureProperty>>, guards: GuardContext, ctrl: Any, rst: string | symbol) => Optional<Interceptor>;
}
