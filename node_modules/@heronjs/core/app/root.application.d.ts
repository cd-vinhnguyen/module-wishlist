import { ModuleDI } from '../di';
import { Instance } from '@heronjs/common/di';
import { Any, CacheStore, DatabaseConnector, DatabaseContext, EventHandler, ModuleStore, Optional, SecureContext, Type } from '@heronjs/common';
import { SecureProperty } from '@heronjs/common/secure';
import { DatabaseClient } from '../consts';
export declare type ApplicationProps = {
    providers: Any[];
    controllers: Any[];
    renderViews: Any[];
    services: Any[];
    realtimes: Any[];
    graphqls: Any[];
    gatekeeper: Optional<Type<SecureContext<Any, SecureProperty>>>;
    dbs: Optional<Type<DatabaseContext<DatabaseClient<Any>, DatabaseConnector<DatabaseClient<Any>>>>[]>;
    stores: Optional<ModuleStore[]>;
    di: ModuleDI;
};
export declare enum SystemInitializeType {
    STORE = 0,
    DATABASE = 1,
    PROVIDER = 2,
    SERVICE = 3,
    FACTORY = 4,
    DAO = 5,
    REPOSITORY = 6
}
export declare type SystemInitialize<T> = {
    value: T;
    type: SystemInitializeType;
};
export declare class RootApplication {
    #private;
    private readonly args;
    readonly SYSTEM_EVENT_NAME = "$$system.$$event";
    constructor(args: ApplicationProps);
    get cacheStore(): CacheStore | undefined;
    get systemEvent(): EventHandler<Any> | undefined;
    get uuid(): string;
    get rests(): Map<string, Instance>;
    get websockets(): Map<Any, Instance>;
    get graphqls(): Map<Any, Instance>;
    get stores(): Map<Any, Instance>;
    get databases(): Map<Any, Instance>;
    get orms(): Map<Any, Instance>;
    get daos(): Map<Any, Instance>;
    get providers(): Map<Any, Instance>;
    get factories(): Map<Any, Instance>;
    get repositories(): Map<Any, Instance>;
    get services(): Map<Any, Instance>;
    get views(): Map<Any, Instance>;
    build: () => Promise<this>;
}
