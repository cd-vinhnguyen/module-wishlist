"use strict";
var _a, _HeronStatic_heron;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeronStatic = void 0;
const tslib_1 = require("tslib");
const consts_1 = require("@heronjs/common/consts");
const reflector_1 = require("@heronjs/common/reflector");
const declarations_1 = require("@heronjs/common/declarations");
const app_1 = require("../app");
const common_1 = require("@heronjs/common");
class HeronStatic {
}
exports.HeronStatic = HeronStatic;
_a = HeronStatic;
_HeronStatic_heron = { value: void 0 };
HeronStatic.create = async (module, di) => {
    if (tslib_1.__classPrivateFieldGet(_a, _a, "f", _HeronStatic_heron))
        return tslib_1.__classPrivateFieldGet(_a, _a, "f", _HeronStatic_heron);
    const _modules = new common_1.LimitedMap(common_1.DEFAULT_LIMITED_MAP_VALUE);
    const importing = async (target, results) => {
        if (!results)
            results = new Array(5);
        const id = (0, common_1.__obtain)(declarations_1.MODULE_ID, target) || (0, common_1.Base64OpaqueId)(target.name);
        if (id) {
            const imported = _modules.get(id);
            if (imported)
                return results;
            else
                _modules.put(id, target);
        }
        const [imports, exports] = (0, reflector_1.__obtains)([declarations_1.HERON_MODULES, declarations_1.MODULE_EXPORTS], target);
        if (exports) {
            (0, consts_1.__merging)(results, { position: 0, value: exports.providers }, { position: 1, value: exports.controllers }, { position: 2, value: exports.views }, { position: 3, value: exports.services }, { position: 4, value: exports.websockets }, { position: 5, value: exports.graphqls });
        }
        else {
            const [providers, controllers, views, services, websockets, graphqls] = (0, reflector_1.__obtains)([declarations_1.MODULE_PROVIDERS, declarations_1.MODULE_CONTROLLERS, declarations_1.MODULE_VIEWS, declarations_1.MODULE_SERVICES, declarations_1.MODULE_WEBSOCKET, declarations_1.MODULE_GRAPHQL], target);
            (0, consts_1.__merging)(results, { position: 0, value: providers }, { position: 1, value: controllers }, { position: 2, value: views }, { position: 3, value: services }, { position: 4, value: websockets }, { position: 5, value: graphqls });
        }
        if (!imports)
            return results;
        for (const imo of imports) {
            results = await importing(imo, results);
        }
        return results;
    };
    const [gatekeeper, databases, stores] = (0, reflector_1.__obtains)([declarations_1.MODULE_GATEKEEPER, declarations_1.MODULE_DATABASES, declarations_1.MODULE_STORES], module);
    const [allProviders, allControllers, allViews, allServices, allWebSockets, allGraphqls] = await importing(module);
    return tslib_1.__classPrivateFieldSet(_a, _a, new app_1.RootApplication({
        providers: allProviders, controllers: allControllers,
        renderViews: allViews, services: allServices, realtimes: allWebSockets, graphqls: allGraphqls,
        gatekeeper, dbs: databases, stores, di
    }), "f", _HeronStatic_heron);
};
