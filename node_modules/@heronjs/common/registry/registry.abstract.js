"use strict";
var _AbstractRegistry_registry;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractRegistry = exports.RegistryType = void 0;
const tslib_1 = require("tslib");
var RegistryType;
(function (RegistryType) {
    RegistryType["DAO"] = "$registry.$dao";
    RegistryType["PROVIDER"] = "$registry.$provider";
    RegistryType["REPOSITORY"] = "$registry.$repository";
    RegistryType["FACTORY"] = "$registry.$factory";
    RegistryType["DATABASE"] = "$registry.$database";
    RegistryType["ORM"] = "$registry.$orm";
    RegistryType["REST"] = "$registry.$rest";
    RegistryType["GRAPHQL"] = "$registry.$graphql";
    RegistryType["WEBSOCKET"] = "$registry.$websocket";
    RegistryType["STORE"] = "$registry.$stores";
    RegistryType["HTML"] = "$registry.$html";
    RegistryType["SERVICE"] = "$registry.$service";
    RegistryType["MODULES_EXPORT"] = "$registry.$module.$exports";
    RegistryType["MODULES_IMPORT"] = "$registry.$module.$imports";
})(RegistryType = exports.RegistryType || (exports.RegistryType = {}));
class AbstractRegistry {
    constructor() {
        _AbstractRegistry_registry.set(this, void 0);
        this.clear = () => tslib_1.__classPrivateFieldGet(this, _AbstractRegistry_registry, "f").clear();
        tslib_1.__classPrivateFieldSet(this, _AbstractRegistry_registry, new Map(), "f");
    }
    get registry() {
        return tslib_1.__classPrivateFieldGet(this, _AbstractRegistry_registry, "f");
    }
    get(key) {
        return tslib_1.__classPrivateFieldGet(this, _AbstractRegistry_registry, "f").get(key);
    }
    instanceBuilder(props) {
        const { target, holder, meta, scope, init, name } = props;
        return {
            isResolve: false, holder, meta, scope, instance: target, init, name
        };
    }
}
exports.AbstractRegistry = AbstractRegistry;
_AbstractRegistry_registry = new WeakMap();
