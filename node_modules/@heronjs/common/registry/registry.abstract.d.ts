import { Any, IRegistry } from '../consts';
import { Instance } from '../di';
import { Scope } from '../enums';
export declare enum RegistryType {
    DAO = "$registry.$dao",
    PROVIDER = "$registry.$provider",
    REPOSITORY = "$registry.$repository",
    FACTORY = "$registry.$factory",
    DATABASE = "$registry.$database",
    ORM = "$registry.$orm",
    REST = "$registry.$rest",
    GRAPHQL = "$registry.$graphql",
    WEBSOCKET = "$registry.$websocket",
    STORE = "$registry.$stores",
    HTML = "$registry.$html",
    SERVICE = "$registry.$service",
    MODULES_EXPORT = "$registry.$module.$exports",
    MODULES_IMPORT = "$registry.$module.$imports"
}
export declare abstract class AbstractRegistry implements IRegistry<string, Any, Any> {
    #private;
    protected constructor();
    get registry(): Map<string, Map<any, Instance>>;
    abstract register(target: Any, name: string, type: unknown | string): Any;
    protected clear: () => void;
    get(key: string): Any;
    protected instanceBuilder(props: {
        target: Any;
        scope: Scope;
        holder: Any;
        meta?: Any;
        name?: string;
        init?: (target?: Instance) => Any;
    }): Instance;
}
