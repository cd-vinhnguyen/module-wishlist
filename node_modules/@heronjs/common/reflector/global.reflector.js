"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__register = exports.__registerIfAbsent = exports.__resolver = void 0;
const meta_reflector_1 = require("./meta.reflector");
/**
 * get metadata from global
 * @param meta
 */
const __resolver = (meta) => {
    return meta ? (0, meta_reflector_1.__obtain)(meta.metaType, global) : undefined;
};
exports.__resolver = __resolver;
/**
 * mixin a new metadata to global if not exists
 * @param meta
 * @param refers
 */
const __registerIfAbsent = (meta, refers) => {
    let gv = (0, meta_reflector_1.__obtain)(meta.metaType, global);
    if (!gv) {
        gv = refers();
        (0, exports.__register)(Object.assign(Object.assign({}, meta), { module: gv }));
    }
    return gv;
};
exports.__registerIfAbsent = __registerIfAbsent;
/**
 * register a metadata to global
 * @param meta
 */
const __register = (meta) => {
    if (meta) {
        (0, meta_reflector_1.__mixin)(global, { name: meta.metaType, refers: meta.module });
    }
};
exports.__register = __register;
