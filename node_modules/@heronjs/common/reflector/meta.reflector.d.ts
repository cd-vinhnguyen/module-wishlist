import { Any } from '../consts';
export declare type Decorator = ClassDecorator;
export declare enum ExtendType {
    obj = "Object",
    array = "Array"
}
/**
 * obtain metadata from target
 * @param meta
 * @param target
 */
export declare const __obtain: <T>(meta: string, target: Any) => T;
/**
 * obtain multiple metadata from target
 * @param metas
 * @param target
 */
export declare const __obtains: <T>(metas: string[] | undefined, target: Any) => T[];
/**
 * get a property from target with property name
 * @param target
 * @param property
 */
export declare const __getProperty: (target: Any, property: string) => any;
/**
 * mixin new metadata to a target
 * @param target
 * @param metas
 */
export declare const __mixin: (target: Any, ...metas: {
    name: string;
    refers: Any;
}[]) => void;
/**
 * mixin new metadata if absent
 * @param target
 * @param metas
 */
export declare const __mixinIfAbsent: (target: Any, ...metas: {
    name: string;
    refers: () => Any;
}[]) => any[];
/**
 * define new property with key and attributes to a target
 * @param target
 * @param key
 * @param attributes
 */
export declare const __define: (target: Any, key: string, attributes: PropertyDescriptor) => boolean;
/**
 * override new property if exist
 * @param target
 * @param key
 * @param attributes
 */
export declare const __overrideIfExists: (target: Any, key: string, attributes: PropertyDescriptor) => void;
/**
 * check target has metadata with name
 * @param name
 * @param target
 */
export declare const __has: (name: string, target: Any) => boolean;
/**
 * decorate a decorator to a target
 * @param decorator
 * @param target
 */
export declare const __annotation: (decorator: Decorator, target: Any) => void;
/**
 * decorate a array of decorators to a target
 * @param target
 * @param decorators
 */
export declare const __annotations: (target: Any, ...decorators: Decorator[]) => void;
/**
 * get method return type
 * @param target
 * @param key
 */
export declare const __returnType: (target: Any, key?: string | symbol) => any;
/**
 * extend a mixin metadata with new value
 * @param type
 * @param target
 * @param defineKey
 * @param values
 */
export declare const __extend: <T>(type: ExtendType, target: Any, defineKey: string, values: Any) => void;
export declare const __selfMeta: <T>(values: T, target: Any) => void;
export declare const __selfConfig: <T>(values: T, target: Any) => void;
export declare const __objectRunner: <T>(values: T, target: Any) => void;
export declare const __defineIfExists: <T>(prop: string, value: T, target: Any) => void;
