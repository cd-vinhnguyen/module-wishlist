"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Render = exports.RENDER_RUNNER = void 0;
const consts_1 = require("../../../consts");
const reflector_1 = require("../../../reflector");
const declarations_1 = require("../../../declarations");
const inversify_1 = require("inversify");
const parameters_1 = require("../parameters");
const utils_1 = require("../../../utils");
const errors_1 = require("../../../errors");
const handler_1 = require("../handler");
exports.RENDER_RUNNER = 'render';
/**
 * Render a html page
 * @param uri
 * @param layout
 * @constructor
 */
const Render = (uri, layout) => {
    return (target) => {
        const render = (0, reflector_1.__getProperty)(target.prototype, exports.RENDER_RUNNER);
        if (!render || !(0, utils_1.isFunction)(render))
            throw new errors_1.ReflectionError(consts_1.RTErrors.DEFINE_META_ERR, handler_1.CAN_NOT_APPLY_METADATA_ERROR + target + 'render is not a function');
        let views = (0, reflector_1.__obtain)(declarations_1.CTRL_VIEW, target);
        if (!views)
            views = [];
        const view = {
            path: uri,
            layout,
            type: consts_1.FunctionType.obs,
            method: parameters_1.Method.GET,
            runner: exports.RENDER_RUNNER,
        };
        views.push(view);
        (0, reflector_1.__mixinIfAbsent)(target, { name: declarations_1.CTRL_VIEW, refers: () => views });
        (0, reflector_1.__annotation)((0, inversify_1.injectable)(), target);
        return target;
    };
};
exports.Render = Render;
