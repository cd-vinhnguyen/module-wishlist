"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assign = exports.apply = exports.CAN_NOT_APPLY_METADATA_ERROR = void 0;
const reflector_1 = require("../../../reflector");
const utils_1 = require("../../../utils");
const consts_1 = require("../../../consts");
const errors_1 = require("../../../errors");
const CAN_NOT_APPLY_METADATA_ERROR = (target) => `can not apply metadata to ${target}`;
exports.CAN_NOT_APPLY_METADATA_ERROR = CAN_NOT_APPLY_METADATA_ERROR;
/**
 * apply metadata for controller target
 * @param target
 */
const apply = (target) => (meta, def) => (args, method, propertyKey, fType = consts_1.FunctionType.func) => {
    if (!target)
        throw new errors_1.ReflectionError(consts_1.RTErrors.DEFINE_META_ERR, (0, exports.CAN_NOT_APPLY_METADATA_ERROR)(target));
    if (!(0, reflector_1.__has)(meta, target)) {
        (0, reflector_1.__mixin)(target, { name: meta, refers: def });
    }
    const { uri, code, headers } = args;
    const routes = (0, reflector_1.__obtain)(meta, target);
    routes.push({
        method, runner: propertyKey, path: uri,
        type: fType, code, headers
    });
    (0, reflector_1.__mixin)(target, { name: meta, refers: routes });
    return target;
};
exports.apply = apply;
/**
 * assign new metadata for property of controller
 * @param target
 */
const assign = (target) => (meta, def) => (type, runner) => {
    if (!target)
        throw new errors_1.ReflectionError(consts_1.RTErrors.DEFINE_META_ERR, (0, exports.CAN_NOT_APPLY_METADATA_ERROR)(target));
    if (!(0, reflector_1.__has)(meta, target)) {
        (0, reflector_1.__mixin)(target, { name: meta, refers: def });
    }
    const runners = (0, reflector_1.__obtain)(meta, target);
    const { key, index, reflect, resolved } = runner;
    let indexKey;
    if ((0, utils_1.isSymbol)(key)) {
        indexKey = key.toString();
    }
    else
        indexKey = key;
    let metas = runners[indexKey];
    if (!metas)
        metas = [];
    metas.push({ type, key, index, reflect, resolved });
    runners[indexKey] = metas;
    (0, reflector_1.__mixin)(target, { name: meta, refers: runners });
    return target;
};
exports.assign = assign;
