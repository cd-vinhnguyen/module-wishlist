"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fuse = exports.Principal = exports.AuthCtx = exports.HttpAuthorize = exports.Body = exports.Queries = exports.Query = exports.Param = exports.Header = exports.Response = exports.Request = exports.Array = void 0;
const handler_1 = require("../handler");
const declarations_1 = require("../../../declarations");
const route_parameter_1 = require("./route.parameter");
const Array = (name) => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.ARRAY_QUERY, {
            key: propertyKey,
            index: parameterIndex,
            reflect: name,
            resolved: false
        });
    };
};
exports.Array = Array;
/**
 * Http Request
 * @constructor
 */
const Request = () => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.REQUEST, {
            key: propertyKey,
            index: parameterIndex,
            reflect: exports.Request.name,
            resolved: false
        });
    };
};
exports.Request = Request;
/**
 * Http Response
 * @constructor
 */
const Response = () => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.RESPONSE, {
            key: propertyKey,
            index: parameterIndex,
            reflect: exports.Response.name,
            resolved: false
        });
    };
};
exports.Response = Response;
/**
 * HTTP Headers
 * @param name
 * @constructor
 */
const Header = (name) => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.HEADER, {
            key: propertyKey,
            index: parameterIndex,
            reflect: name,
            resolved: false
        });
    };
};
exports.Header = Header;
/**
 * Http Params
 * @param name
 * @constructor
 */
const Param = (name) => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.PARAM, {
            key: propertyKey,
            index: parameterIndex,
            reflect: name,
            resolved: false
        });
    };
};
exports.Param = Param;
/**
 * HTTP Queries Param
 * @param name
 * @constructor
 */
const Query = (name) => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.QUERY, {
            key: propertyKey,
            index: parameterIndex,
            reflect: name,
            resolved: false
        });
    };
};
exports.Query = Query;
const Queries = () => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.QUERIES, {
            key: propertyKey,
            index: parameterIndex,
            reflect: exports.Queries.name,
            record: target,
            resolved: false
        });
    };
};
exports.Queries = Queries;
/**
 * HTTP Body
 * @constructor
 */
const Body = () => {
    return (target, propertyKey, parameterIndex) => {
        (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.BODY, {
            key: propertyKey,
            index: parameterIndex,
            resolved: false
        });
    };
};
exports.Body = Body;
/**
 * @deprecated
 * HTTP Authorize
 * @use {Principal} instead
 */
const HttpAuthorize = (property) => (target, propertyKey, parameterIndex) => {
    (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.AUTHORIZE, {
        key: propertyKey,
        index: parameterIndex,
        reflect: property,
        resolved: false
    });
};
exports.HttpAuthorize = HttpAuthorize;
/**
 * Authorize Context
 * @param property
 * @constructor
 * @deprecated
 * @use {Principal} instead
 */
const AuthCtx = (property) => (target, propertyKey, parameterIndex) => {
    (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.AUTHORIZE, {
        key: propertyKey,
        index: parameterIndex,
        reflect: property,
        resolved: false
    });
};
exports.AuthCtx = AuthCtx;
/**
 * Principal Context
 * @param property
 * @constructor
 */
const Principal = (property) => (target, propertyKey, parameterIndex) => {
    (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.AUTHORIZE, {
        key: propertyKey,
        index: parameterIndex,
        reflect: property,
        resolved: false
    });
};
exports.Principal = Principal;
/**
 * Fuse Decorator
 * @param name
 * @constructor
 */
const Fuse = (name) => (target, propertyKey, parameterIndex) => {
    (0, handler_1.assign)(target.constructor)(declarations_1.OBJECT_RUNNER, [])(route_parameter_1.HttpParameter.FUSE, {
        key: propertyKey,
        index: parameterIndex,
        reflect: name,
        resolved: false
    });
};
exports.Fuse = Fuse;
