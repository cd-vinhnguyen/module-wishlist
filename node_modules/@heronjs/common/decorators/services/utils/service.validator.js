"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__serviceValidator = void 0;
const consts_1 = require("../../../consts");
const reflector_1 = require("../../../reflector");
const declarations_1 = require("../../../declarations");
const errors_1 = require("../../../errors");
const __serviceValidator = (type, target) => {
    const metas = (0, reflector_1.__obtain)(declarations_1.OBJECT_RUNNER, target);
    if (!metas)
        throw new errors_1.ModuleError(consts_1.SYSErrors.MODULE_ERR, (0, consts_1.INVALID_SERVICE_IDENTIFICATION)(target.name));
    const { runners } = metas;
    const indicators = runners.map(x => x.type);
    let isValid = false;
    let message = '';
    switch (type) {
        case consts_1.ServiceType.INTERVAL:
            isValid = __typeChecks(indicators, [consts_1.ServiceMethodIndicator.OnStart]);
            message = '@OnStart';
            break;
        case consts_1.ServiceType.MESSAGING:
            isValid = __typeChecks(indicators, [consts_1.ServiceMethodIndicator.OnStart, consts_1.ServiceMethodIndicator.PreDestroy, consts_1.ServiceMethodIndicator.Publisher, consts_1.ServiceMethodIndicator.Consumer]);
            message = '@OnStart,@PreDestroy,@Publisher,@Consumer';
            break;
        case consts_1.ServiceType.SERVICE:
            isValid = __typeChecks(indicators, [consts_1.ServiceMethodIndicator.OnStart, consts_1.ServiceMethodIndicator.PreDestroy]);
            message = '@OnStart,@PreDestroy,@Consumer';
            break;
        case consts_1.ServiceType.CRON_SERVICE:
            isValid = __typeChecks(indicators, [consts_1.ServiceMethodIndicator.OnComplete, consts_1.ServiceMethodIndicator.OnStart, consts_1.ServiceMethodIndicator.PreDestroy]);
            message = '@OnStart,@PreDestroy,@OnComplete';
    }
    if (!isValid)
        throw new errors_1.ModuleError(consts_1.SYSErrors.MODULE_ERR, (0, consts_1.SERVICE_DECLARE_ERROR)(target.name, message));
};
exports.__serviceValidator = __serviceValidator;
const __typeChecks = (indicators, conditions) => {
    if (!indicators || indicators.length === 0)
        return false;
    return indicators.some(x => conditions.indexOf(x) !== -1);
};
