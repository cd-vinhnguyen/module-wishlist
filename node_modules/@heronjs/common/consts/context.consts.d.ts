import { Observable } from 'rxjs';
import { GuardProperty, SecureProperty } from '../secure';
import { Any, DatabaseConnector, EventHandler, FunctionType, TypeOfFunction } from '../consts';
import { RuntimeError } from '../errors';
/**
 * Secure Context from Request and SecureProperty
 * @link(Request)
 * @link(SecureProperty)
 */
export interface SecureContext<T, R extends SecureProperty> {
    OnGuard: (req: T | Any) => Observable<R | undefined>;
}
/**
 * create database context configuration
 * @link(DatabaseConfig)
 */
export interface DatabaseContext<E, T extends DatabaseConnector<E>> {
    context: () => DatabaseContext<E, T>;
}
/**
 * create store context configuration
 */
export interface StoreContext<T> {
    context: () => T;
}
export interface IEventContext {
    handler: <T>(name: string) => EventHandler<T>;
}
export declare type GuardContextMetadata = {
    isController: boolean;
    property: GuardProperty;
};
/**
 * Guard context metadata
 */
export declare type GuardContext = Record<string | symbol, GuardContextMetadata>;
export declare type DispatchContext<T> = {
    parameters?: Any[];
    handler: {
        next: (data: T | unknown) => Any;
        error: (error: RuntimeError | Error | unknown) => void;
    };
};
export interface MethodContext<T, P> {
    key: string | symbol;
    ft?: FunctionType;
    behaviors?: T;
    parameters?: ParameterContext<P>[];
}
/**
 * method parameter context
 *
 */
export interface ParameterContext<T> {
    type: T;
    key: string | symbol;
    index: number;
    reflect?: string | symbol;
    record?: Any;
    resolved: boolean;
}
export interface ExecutableContext<T> extends ParameterContext<T>, TypeOfFunction {
    args?: Any[];
}
export declare type ObjectMethodContext<T> = Record<string, T>;
