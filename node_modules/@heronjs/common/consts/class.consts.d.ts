import { Any, Optional } from './type.consts';
import { MethodContext } from './context.consts';
export interface IMap<K, T> {
    get: (key: K) => T;
    put: (key: K, value: T) => [K, T];
}
export declare class LimitedMap<K, T> implements IMap<K, T> {
    private readonly maxEntries;
    private values;
    constructor(maxEntries?: number);
    get: (key: K) => T;
    put: (key: K, value: T) => [K, T];
}
export declare abstract class BaseEntity<T extends string | number> {
    protected id: Optional<T>;
    protected createdAt: Optional<number>;
    protected updatedAt: Optional<number>;
    getId: () => Optional<T>;
    getCreatedAt: () => Optional<number>;
    getUpdatedAt: () => Optional<number>;
    validate: () => Promise<void>;
}
export declare abstract class BaseModel<T extends string | number> {
    protected id: Optional<T>;
    protected createdAt: Optional<number>;
    protected updatedAt: Optional<number>;
    getId: () => Optional<T>;
    getCreatedAt: () => Optional<number>;
    getUpdatedAt: () => Optional<number>;
    validate: () => Promise<void>;
}
export declare type ObjectRecord<T, P> = {
    [x: string]: Any;
    _methods_: MethodContext<T, P>;
    _selfConfig_: Any;
    _selfMeta_: Any;
};
