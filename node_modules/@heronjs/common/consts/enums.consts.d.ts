/**
 * Cache Client
 */
export declare enum CacheClient {
    REDIS = "redis",
    MEMORY = "memory",
    DISK = "disk",
    HAZELCAST = "hazelcast"
}
/**
 * cache store provider
 */
export declare enum CacheStoreProvider {
    MEMORY_PROVIDER = "cache-memory-store-provider",
    REDIS_PROVIDER = "cache-redis-store-provider",
    HAZELCAST_PROVIDER = "cache-hazelcast-store-provider",
    DISK_PROVIDER = "cache-disk-store-provider"
}
/**
 * cache store config
 */
export declare enum CacheStoreConfig {
    MEMORY_CONFIG = "cache-memory-store-config",
    REDIS_CONFIG = "cache-redis-store-config",
    HAZELCAST_CONFIG = "cache-hazelcast-store-config",
    DISK_CONFIG = "cache-disk-store-config"
}
/**
 * kernel process shutdown signal
 */
export declare enum ShutdownSignal {
    signup = "SIGNUP",
    sigint = "SIGINT",
    sigquit = "SIGQUIT",
    sigill = "SIGILL",
    sigtrap = "SIGTRAP",
    sigabrt = "SIGABRT",
    sigbus = "SIGBUS",
    sigfpe = "SIGFPE",
    sigsegv = "SIGSEGV",
    sigusr2 = "SIGUSR2",
    sigterm = "SIGTERM"
}
/**
 * Function Type
 * @func - @link(Function)
 * @prom - @link(Promise)
 * @obs - @link(Rx.Observable)
 */
export declare enum FunctionType {
    func = "Function",
    prom = "Promise",
    obs = "Observable"
}
export declare enum ServiceType {
    INTERVAL = "interval_service",
    MESSAGING = "messaging_service",
    SERVICE = "general_service",
    CRON_SERVICE = "cron_service"
}
export declare enum HttpRouteType {
    API = "api",
    VIEW = "view"
}
export declare enum CacheBehavior {
    CACHING = 0,
    EVICT = 1
}
export declare enum ServiceMethodIndicator {
    OnStart = 0,
    PreDestroy = 1,
    Publisher = 2,
    Consumer = 3,
    OnComplete = 4,
    Forward = 5
}
export declare enum StoreType {
    CACHE = "cache-store",
    STORAGE = "storage-store"
}
export declare enum RealtimeTransmitter {
    WEBSOCKET = "websocket",
    SSE = "sever-sent-events"
}
export declare enum RealtimeMethodIndicator {
    ON_OPEN = "on-open",
    ON_CLOSE = "on-close",
    RECEIVE_FROM = "receive-from",
    ON_ERROR = "on-error",
    SEND_TO = "send-to"
}
export declare enum HttpResolverType {
    HEADER = "http-header",
    COOKIE = "http-cookie",
    SESSION = "http-session"
}
export declare enum SystemEventType {
    CACHING = "system-caching",
    INITIALIZING = "system-initializing",
    TERMINATING = "system-terminating"
}
export declare enum TracingExporterType {
    CONSOLE = "console",
    REMOTE = "remote"
}
export declare enum TracingRemoteClient {
    ZIPKIN = "zipkin",
    JAEGER = "jaeger",
    PROMETHEUS = "prometheus",
    ELASTIC_AMP = "elastic_amp",
    SIGNOZ = "signoz"
}
