/// <reference types="node" />
import { Any } from './type.consts';
import { CorsOptions, CorsOptionsDelegate } from 'cors';
import { SocketTransport } from './http.consts';
export interface HostOptions {
    host?: string;
    port?: number;
}
export declare const DatabaseContextOptions: {
    context: string;
};
/**
 * ttl in seconds
 */
export declare type CacheOptions = {
    key?: string;
    ttl?: number;
};
export declare type CacheClientOptions = RedisOptions | MemoryOptions | HazelCastOptions | DiskOptions;
/**
 * common stores configuration
 */
export declare type CommonCacheOptions = HostOptions & {
    ttl: number;
    cacheValueValidator?: (value: any) => boolean;
};
/**
 * configuration for redis using stores-manager-ioredis
 */
export declare type RedisCacheNode = {
    host: string;
    port: number;
};
export declare type RedisOptions = CommonCacheOptions & {
    password: string;
    db: number;
    tls?: {
        ca: string | Buffer;
    };
    child?: RedisCacheNode[];
};
export declare type MemoryOptions = CommonCacheOptions & {
    max: number;
};
/**
 * configuration for stores-manager-hazelcast
 */
export declare type HazelCastOptions = CommonCacheOptions & {
    prefix: string;
    defaultMap: string;
};
/**
 * configuration for stores-manager-fs-hash
 */
export declare type DiskOptions = CommonCacheOptions & {
    subdirs: boolean;
    zip: boolean;
    path: string;
};
/**
 * option for jwt token
 * credentials: {
 *     key: private key
 *     secret: public key or secret string
 * }
 * message: verification error message
 */
export declare type JwtOptions = {
    alg: 'HS256' | 'HS384' | 'HS512' | 'RS256' | 'RS384' | 'RS512' | 'ES256' | 'ES384' | 'ES512' | 'PS256' | 'PS384' | 'PS512' | 'none';
    credentials: {
        key?: string | Buffer;
        secret: string | Buffer;
    };
    issuer?: string;
    message?: string;
};
export declare type IoOptions = {
    transports?: SocketTransport[];
    adapter?: Any;
    parser?: Any;
    cors?: CorsOptions | CorsOptionsDelegate;
    pingTimeout?: number;
    pingInterval?: number;
    upgradeTimeout?: number;
    maxHttpBufferSize?: number;
    allowRequest?: (...args: Any[]) => void;
    allowUpgrades?: boolean;
    wsEngine?: any;
    cookie?: Any;
    allowEIO3?: boolean;
};
export declare type GraphQLOptions = {
    prefix?: string;
    plugins?: Any[];
    formatError?: (error: Error | unknown) => Any;
    gqlDir?: string;
    validationRules?: Any[];
    cors?: CorsOptions | CorsOptionsDelegate;
};
export declare type WebSocketOptions<I> = {
    wsPath?: string;
    interceptors?: I[];
    compressions?: {
        perMessageDeflate?: {
            threshold?: number;
            zlibDeflateOptions?: {
                chunkSize?: number;
            };
            zlibInflateOptions?: {
                windowBits?: number;
                memLevel?: number;
            };
            clientNoContextTakeover?: boolean;
            serverNoContextTakeover?: boolean;
            serverMaxWindowBits?: number;
            concurrencyLimit?: number;
        };
        httpCompression?: {
            threshold?: number;
            chunkSize?: number;
            windowBits?: number;
            memLevel?: number;
        };
    };
    io?: IoOptions;
};
