"use strict";
/**
 * Cache Client
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TracingRemoteClient = exports.TracingExporterType = exports.SystemEventType = exports.HttpResolverType = exports.RealtimeMethodIndicator = exports.RealtimeTransmitter = exports.StoreType = exports.ServiceMethodIndicator = exports.CacheBehavior = exports.HttpRouteType = exports.ServiceType = exports.FunctionType = exports.ShutdownSignal = exports.CacheStoreConfig = exports.CacheStoreProvider = exports.CacheClient = void 0;
var CacheClient;
(function (CacheClient) {
    CacheClient["REDIS"] = "redis";
    CacheClient["MEMORY"] = "memory";
    CacheClient["DISK"] = "disk";
    CacheClient["HAZELCAST"] = "hazelcast";
})(CacheClient = exports.CacheClient || (exports.CacheClient = {}));
/**
 * cache store provider
 */
var CacheStoreProvider;
(function (CacheStoreProvider) {
    CacheStoreProvider["MEMORY_PROVIDER"] = "cache-memory-store-provider";
    CacheStoreProvider["REDIS_PROVIDER"] = "cache-redis-store-provider";
    CacheStoreProvider["HAZELCAST_PROVIDER"] = "cache-hazelcast-store-provider";
    CacheStoreProvider["DISK_PROVIDER"] = "cache-disk-store-provider";
})(CacheStoreProvider = exports.CacheStoreProvider || (exports.CacheStoreProvider = {}));
/**
 * cache store config
 */
var CacheStoreConfig;
(function (CacheStoreConfig) {
    CacheStoreConfig["MEMORY_CONFIG"] = "cache-memory-store-config";
    CacheStoreConfig["REDIS_CONFIG"] = "cache-redis-store-config";
    CacheStoreConfig["HAZELCAST_CONFIG"] = "cache-hazelcast-store-config";
    CacheStoreConfig["DISK_CONFIG"] = "cache-disk-store-config";
})(CacheStoreConfig = exports.CacheStoreConfig || (exports.CacheStoreConfig = {}));
/**
 * kernel process shutdown signal
 */
var ShutdownSignal;
(function (ShutdownSignal) {
    ShutdownSignal["signup"] = "SIGNUP";
    ShutdownSignal["sigint"] = "SIGINT";
    ShutdownSignal["sigquit"] = "SIGQUIT";
    ShutdownSignal["sigill"] = "SIGILL";
    ShutdownSignal["sigtrap"] = "SIGTRAP";
    ShutdownSignal["sigabrt"] = "SIGABRT";
    ShutdownSignal["sigbus"] = "SIGBUS";
    ShutdownSignal["sigfpe"] = "SIGFPE";
    ShutdownSignal["sigsegv"] = "SIGSEGV";
    ShutdownSignal["sigusr2"] = "SIGUSR2";
    ShutdownSignal["sigterm"] = "SIGTERM";
})(ShutdownSignal = exports.ShutdownSignal || (exports.ShutdownSignal = {}));
/**
 * Function Type
 * @func - @link(Function)
 * @prom - @link(Promise)
 * @obs - @link(Rx.Observable)
 */
var FunctionType;
(function (FunctionType) {
    FunctionType["func"] = "Function";
    FunctionType["prom"] = "Promise";
    FunctionType["obs"] = "Observable";
})(FunctionType = exports.FunctionType || (exports.FunctionType = {}));
var ServiceType;
(function (ServiceType) {
    ServiceType["INTERVAL"] = "interval_service";
    ServiceType["MESSAGING"] = "messaging_service";
    ServiceType["SERVICE"] = "general_service";
    ServiceType["CRON_SERVICE"] = "cron_service";
})(ServiceType = exports.ServiceType || (exports.ServiceType = {}));
var HttpRouteType;
(function (HttpRouteType) {
    HttpRouteType["API"] = "api";
    HttpRouteType["VIEW"] = "view";
})(HttpRouteType = exports.HttpRouteType || (exports.HttpRouteType = {}));
var CacheBehavior;
(function (CacheBehavior) {
    CacheBehavior[CacheBehavior["CACHING"] = 0] = "CACHING";
    CacheBehavior[CacheBehavior["EVICT"] = 1] = "EVICT";
})(CacheBehavior = exports.CacheBehavior || (exports.CacheBehavior = {}));
var ServiceMethodIndicator;
(function (ServiceMethodIndicator) {
    ServiceMethodIndicator[ServiceMethodIndicator["OnStart"] = 0] = "OnStart";
    ServiceMethodIndicator[ServiceMethodIndicator["PreDestroy"] = 1] = "PreDestroy";
    ServiceMethodIndicator[ServiceMethodIndicator["Publisher"] = 2] = "Publisher";
    ServiceMethodIndicator[ServiceMethodIndicator["Consumer"] = 3] = "Consumer";
    ServiceMethodIndicator[ServiceMethodIndicator["OnComplete"] = 4] = "OnComplete";
    ServiceMethodIndicator[ServiceMethodIndicator["Forward"] = 5] = "Forward";
})(ServiceMethodIndicator = exports.ServiceMethodIndicator || (exports.ServiceMethodIndicator = {}));
var StoreType;
(function (StoreType) {
    StoreType["CACHE"] = "cache-store";
    StoreType["STORAGE"] = "storage-store";
})(StoreType = exports.StoreType || (exports.StoreType = {}));
var RealtimeTransmitter;
(function (RealtimeTransmitter) {
    RealtimeTransmitter["WEBSOCKET"] = "websocket";
    RealtimeTransmitter["SSE"] = "sever-sent-events";
})(RealtimeTransmitter = exports.RealtimeTransmitter || (exports.RealtimeTransmitter = {}));
var RealtimeMethodIndicator;
(function (RealtimeMethodIndicator) {
    RealtimeMethodIndicator["ON_OPEN"] = "on-open";
    RealtimeMethodIndicator["ON_CLOSE"] = "on-close";
    RealtimeMethodIndicator["RECEIVE_FROM"] = "receive-from";
    RealtimeMethodIndicator["ON_ERROR"] = "on-error";
    RealtimeMethodIndicator["SEND_TO"] = "send-to";
})(RealtimeMethodIndicator = exports.RealtimeMethodIndicator || (exports.RealtimeMethodIndicator = {}));
var HttpResolverType;
(function (HttpResolverType) {
    HttpResolverType["HEADER"] = "http-header";
    HttpResolverType["COOKIE"] = "http-cookie";
    HttpResolverType["SESSION"] = "http-session";
})(HttpResolverType = exports.HttpResolverType || (exports.HttpResolverType = {}));
var SystemEventType;
(function (SystemEventType) {
    SystemEventType["CACHING"] = "system-caching";
    SystemEventType["INITIALIZING"] = "system-initializing";
    SystemEventType["TERMINATING"] = "system-terminating";
})(SystemEventType = exports.SystemEventType || (exports.SystemEventType = {}));
var TracingExporterType;
(function (TracingExporterType) {
    TracingExporterType["CONSOLE"] = "console";
    TracingExporterType["REMOTE"] = "remote";
})(TracingExporterType = exports.TracingExporterType || (exports.TracingExporterType = {}));
var TracingRemoteClient;
(function (TracingRemoteClient) {
    TracingRemoteClient["ZIPKIN"] = "zipkin";
    TracingRemoteClient["JAEGER"] = "jaeger";
    TracingRemoteClient["PROMETHEUS"] = "prometheus";
    TracingRemoteClient["ELASTIC_AMP"] = "elastic_amp";
    TracingRemoteClient["SIGNOZ"] = "signoz";
})(TracingRemoteClient = exports.TracingRemoteClient || (exports.TracingRemoteClient = {}));
