"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.__merging = exports.__funcBy = exports.stString = exports.toSymbol = exports.asc = exports.getScope = exports.flatten = exports.rethrow = void 0;
const declarations_1 = require("../declarations");
const utils_1 = require("../utils");
const enums_consts_1 = require("./enums.consts");
/**
 * rethrow error
 * @param err
 */
const rethrow = (err) => {
    throw err;
};
exports.rethrow = rethrow;
/**
 * Flat arrays
 * @param arr
 */
const flatten = (arr) => arr.reduce((a, b) => a.concat(b), []);
exports.flatten = flatten;
/**
 * get provider scope
 * @param provider
 */
const getScope = (provider) => {
    const metadata = Reflect.getMetadata(declarations_1.SCOPE_OPTIONS_METADATA, provider);
    return metadata && metadata.scope;
};
exports.getScope = getScope;
/**
 * sort order ascending
 * @param a
 * @param b
 */
const asc = (a, b) => {
    if (a > b)
        return 1;
    if (a < b)
        return -1;
    return 0;
};
exports.asc = asc;
/**
 * convert string to symbol
 * @param input
 */
const toSymbol = (input) => Symbol.for(input);
exports.toSymbol = toSymbol;
/**
 * convert union type string | symbol to string
 * check type if symbol then return string
 * @param symbol
 */
const stString = (symbol) => (0, utils_1.isSymbol)(symbol) ? symbol.toString() : symbol;
exports.stString = stString;
/**
 * Get function type
 * @param target
 * @param key
 */
const __funcBy = (target, key) => {
    let type = enums_consts_1.FunctionType.func;
    if ((0, utils_1.isPromise)(target, key))
        type = enums_consts_1.FunctionType.prom;
    else if ((0, utils_1.isObservable)(target, key))
        type = enums_consts_1.FunctionType.obs;
    return type;
};
exports.__funcBy = __funcBy;
/**
 * merging array data by position
 * @param arrays
 * @param args
 */
const __merging = (arrays, ...args) => {
    if (args && args.length > 0) {
        for (const arg of args) {
            const { position, value } = arg;
            if (value)
                arrays[position] = arrays[position] ? [...arrays[position], ...value] : value;
        }
    }
    return arrays;
};
exports.__merging = __merging;
