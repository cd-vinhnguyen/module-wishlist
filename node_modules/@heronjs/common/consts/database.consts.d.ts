import { Any, Optional } from './type.consts';
/**
 * runtime module database token
 */
export declare const MODULE_DATABASE = "ModuleDatabase";
/**
 * database config
 */
export declare type DatabaseConfig = {
    client: DatabaseClient;
    config: CommonDatabaseConfig;
};
/**
 * database connection pooling
 */
export declare type ConnectionPooling = {
    min: number;
    max: number;
};
/**
 * database cluster
 */
export declare type DatabaseCluster<D> = {
    master: D;
    slaves: D[];
};
/**
 * database cluster (master-slave) config
 */
export declare type ClusterConnection = {
    slaves: string;
};
/**
 * database tls connection config
 */
export declare type TLSConfig = {
    enabled: boolean;
    ssl: string | boolean;
};
/**
 * database config
 */
export declare type CommonDatabaseConfig = {
    driver?: DatabaseDriver;
    host: string;
    port: number;
    user: string;
    password: string;
    database?: string;
    tls?: TLSConfig;
    typeCast?: DatabaseTypeCast;
    pooling?: ConnectionPooling;
    cluster?: ClusterConnection;
    migration?: DatabaseMigration;
};
/**
 * Database config for nosql like mongodb, cassandra
 */
export declare type NoSQLDatabaseConfig = CommonDatabaseConfig & {
    options: Any;
};
/**
 * database table for migration
 */
export declare type DatabaseMigration = {
    tableName: string;
};
/**
 * Database connection mode
 */
export declare enum ConnectionMode {
    STANDALONE = 0,
    CLUSTER = 1
}
/**
 * database driver
 */
export declare enum DatabaseDriver {
    MYSQL = "mysql",
    POSTGRES = "postgres",
    SQLITE = "sqlite3",
    ORACLE = "oracledb",
    MARIADB = "mariadb",
    MONGODB = "mongodb",
    CASSANDRA = "cassandra"
}
/**
 * database client
 */
export declare enum DatabaseClient {
    KNEX = 0
}
/**
 * module database
 */
export interface ModuleDatabase<T> {
    database: (config?: DatabaseConfig | string) => Optional<T>;
    config: Optional<Any>;
}
/**
 * database connector interface
 */
export interface DatabaseConnector<D> {
    connect: () => void;
    get: <T>() => Optional<D>;
}
/**
 * database type cast
 */
export interface DatabaseTypeCast {
    cast: <T>(field: Any, next: Any) => T;
}
