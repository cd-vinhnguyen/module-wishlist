import { Any } from './type.consts';
import { Route, View } from '../decorators';
import { StatusCodes } from 'http-status-codes';
import { Interceptor } from './interfaces.consts';
import { CorsOptions, CorsOptionsDelegate } from 'cors';
import { GraphQLOptions, WebSocketOptions } from './options.consts';
import { SessionOptions } from 'express-session';
export declare type HttpStatusCodes = StatusCodes;
/**
 * Http Operator Context
 * request : http request,
 * response : http response
 */
export declare type HttpOperatorContext<Req, Res, Next> = {
    request?: Req;
    response?: Res;
    next?: Next;
};
/**
 * Http Request Route
 */
export declare type RequestRoute<Req, Res, Next> = Route & HttpOperatorContext<Req, Res, Next>;
/**
 * Http View Route
 */
export declare type ViewRoute<Req, Res, Next> = View & HttpOperatorContext<Req, Res, Next>;
/**
 * Http Adapter
 * @{object} express
 * @{object} fastify
 */
export declare enum HttpAdapterType {
    EXPRESS = "express",
    FASTIFY = "fastify"
}
/**
 * Express Server Option
 * @http
 */
export declare type ServerOptions = {
    port: number;
    options?: HttpOptions<Any, Any>;
    subServer?: {
        ws?: WebSocketOptions<Any>;
        graphql?: GraphQLOptions;
    };
};
export declare type SocketTransport = 'polling' | 'websocket';
/**
 * Express server configuration
 * @http
 */
export declare type HttpOptions<I, E extends Interceptor> = {
    uri?: string;
    parsers?: E[];
    interceptors?: I[];
    globalError?: E;
    cors?: CorsOptions | CorsOptionsDelegate;
    helmet?: Any;
    session?: SessionOptions;
};
