"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VALUE_IS_NOT_ARRAY = exports.VALUE_IS_NOT_BOOLEAN = exports.VALUE_IS_NOT_STRING = exports.INVALID_CONTROLLER_DEFINITION = exports.NO_DETAIL_INFO = exports.INVALID_SUPPORTED_FUNCTION_TYPE = exports.FUNCTION_NOT_SUPPORTED = exports.PLUGIN_NOT_SUPPORTED = exports.CAN_NOT_GET_NULL_OBJECT = exports.CAN_NOT_DISPATCH_FUNCTION = exports.RENDER_ERROR_IN_HTML = exports.CAN_NOT_RENDER_PAGE = exports.CREATE_RENDER_ENGINE_ERROR = exports.CAN_NOT_CREATE_RENDER_ENGINE = exports.SERVICE_MULTI_PURPOSE_WARNING = exports.SERVICE_STARTED = exports.SERVICE_DECLARE_ERROR = exports.INVALID_SERVICE_IDENTIFICATION = exports.SYSTEM_SHUTTING_DOWN = exports.INVALID_MODULE_CONFIG_MESSAGE = exports.DUPLICATE_MODULE_BIDING_ERROR = exports.MODULE_DI_RESOLVE_ERROR = exports.CREATE_PROVIDER_FAILED = exports.MODULE_INJECTOR_ERROR = exports.CLOSE_EMPTY_CONNECTION_ERROR = exports.INVALID_DATABASE_DRIVER = exports.CREATE_ORM_INSTANCE_FAILED = exports.CREATE_DATABASE_CONNECTION_FAILED = exports.CAN_NOT_REGISTER_CONTROLLER = exports.CAN_NOT_REGISTER_ROUTE = exports.ADAPTER_NOT_IMPLEMENTED = exports.SERVER_STARTED_AT_PORT = exports.CAN_NOT_START_SERVER = void 0;
// http server error messages
const CAN_NOT_START_SERVER = (info) => `can not start server ${info}`;
exports.CAN_NOT_START_SERVER = CAN_NOT_START_SERVER;
const SERVER_STARTED_AT_PORT = (port) => `server started at port ${port}`;
exports.SERVER_STARTED_AT_PORT = SERVER_STARTED_AT_PORT;
const ADAPTER_NOT_IMPLEMENTED = (adapter) => `${adapter} adapter not implemented in the current version`;
exports.ADAPTER_NOT_IMPLEMENTED = ADAPTER_NOT_IMPLEMENTED;
const CAN_NOT_REGISTER_ROUTE = (info) => `can not register route ${info}`;
exports.CAN_NOT_REGISTER_ROUTE = CAN_NOT_REGISTER_ROUTE;
const CAN_NOT_REGISTER_CONTROLLER = (info) => `can not register controller ${info}`;
exports.CAN_NOT_REGISTER_CONTROLLER = CAN_NOT_REGISTER_CONTROLLER;
// database error messages
const CREATE_DATABASE_CONNECTION_FAILED = (info) => `failed to create connection to database ${info}`;
exports.CREATE_DATABASE_CONNECTION_FAILED = CREATE_DATABASE_CONNECTION_FAILED;
const CREATE_ORM_INSTANCE_FAILED = (info) => `failed to create orm instance ${info}`;
exports.CREATE_ORM_INSTANCE_FAILED = CREATE_ORM_INSTANCE_FAILED;
const INVALID_DATABASE_DRIVER = (driver) => `invalid database driver ${driver}`;
exports.INVALID_DATABASE_DRIVER = INVALID_DATABASE_DRIVER;
exports.CLOSE_EMPTY_CONNECTION_ERROR = `can not close empty connection`;
// module di error messages
const MODULE_INJECTOR_ERROR = (info) => `failed to get ${info} injector `;
exports.MODULE_INJECTOR_ERROR = MODULE_INJECTOR_ERROR;
const CREATE_PROVIDER_FAILED = (info) => `can not create provider with ${info}`;
exports.CREATE_PROVIDER_FAILED = CREATE_PROVIDER_FAILED;
const MODULE_DI_RESOLVE_ERROR = (info) => `invalid dependency injection : ${info}`;
exports.MODULE_DI_RESOLVE_ERROR = MODULE_DI_RESOLVE_ERROR;
const DUPLICATE_MODULE_BIDING_ERROR = (info) => `duplicate module binding ${info}`;
exports.DUPLICATE_MODULE_BIDING_ERROR = DUPLICATE_MODULE_BIDING_ERROR;
const INVALID_MODULE_CONFIG_MESSAGE = (property) => `Invalid property '${property}' passed into the @Module() decorator.`;
exports.INVALID_MODULE_CONFIG_MESSAGE = INVALID_MODULE_CONFIG_MESSAGE;
// process & system error messages
const SYSTEM_SHUTTING_DOWN = (code) => `server shutting down with ${code}`;
exports.SYSTEM_SHUTTING_DOWN = SYSTEM_SHUTTING_DOWN;
const INVALID_SERVICE_IDENTIFICATION = (service) => `invalid ${service} identification`;
exports.INVALID_SERVICE_IDENTIFICATION = INVALID_SERVICE_IDENTIFICATION;
const SERVICE_DECLARE_ERROR = (service, message) => `Missing ${message} from ${service} declaration`;
exports.SERVICE_DECLARE_ERROR = SERVICE_DECLARE_ERROR;
const SERVICE_STARTED = (service, period) => `The service ${service} has been started with interval period is ${period}`;
exports.SERVICE_STARTED = SERVICE_STARTED;
const SERVICE_MULTI_PURPOSE_WARNING = (service, purpose, required) => `The service ${service} has multiple ${purpose} need ${required}`;
exports.SERVICE_MULTI_PURPOSE_WARNING = SERVICE_MULTI_PURPOSE_WARNING;
// render engine error messages
const CAN_NOT_CREATE_RENDER_ENGINE = (info) => `can not create render engine ${info}`;
exports.CAN_NOT_CREATE_RENDER_ENGINE = CAN_NOT_CREATE_RENDER_ENGINE;
const CREATE_RENDER_ENGINE_ERROR = (info) => `create render engine error caused by ${info}`;
exports.CREATE_RENDER_ENGINE_ERROR = CREATE_RENDER_ENGINE_ERROR;
const CAN_NOT_RENDER_PAGE = (info) => `can not render page ${info}`;
exports.CAN_NOT_RENDER_PAGE = CAN_NOT_RENDER_PAGE;
const RENDER_ERROR_IN_HTML = (error) => `<h1>Page Error</h1><br><hr>${error.message}`;
exports.RENDER_ERROR_IN_HTML = RENDER_ERROR_IN_HTML;
// function error messages
const CAN_NOT_DISPATCH_FUNCTION = (info) => `can not dispatch function with ${info}`;
exports.CAN_NOT_DISPATCH_FUNCTION = CAN_NOT_DISPATCH_FUNCTION;
const CAN_NOT_GET_NULL_OBJECT = (info) => `can not get null or undefined object ${info}`;
exports.CAN_NOT_GET_NULL_OBJECT = CAN_NOT_GET_NULL_OBJECT;
// common error messages
const PLUGIN_NOT_SUPPORTED = (info) => `the ${info} plugin is not supported in the current version!`;
exports.PLUGIN_NOT_SUPPORTED = PLUGIN_NOT_SUPPORTED;
const FUNCTION_NOT_SUPPORTED = (info) => `the ${info} is not supported in the current version!`;
exports.FUNCTION_NOT_SUPPORTED = FUNCTION_NOT_SUPPORTED;
const INVALID_SUPPORTED_FUNCTION_TYPE = (info) => `${info} function type is not supported`;
exports.INVALID_SUPPORTED_FUNCTION_TYPE = INVALID_SUPPORTED_FUNCTION_TYPE;
exports.NO_DETAIL_INFO = 'the error has no detail';
// graphql error messages
const INVALID_CONTROLLER_DEFINITION = (info) => `invalid ${info} definition`;
exports.INVALID_CONTROLLER_DEFINITION = INVALID_CONTROLLER_DEFINITION;
// type error messages
const VALUE_IS_NOT_STRING = (info) => `${info} is not string!`;
exports.VALUE_IS_NOT_STRING = VALUE_IS_NOT_STRING;
const VALUE_IS_NOT_BOOLEAN = (info) => `${info} is not boolean`;
exports.VALUE_IS_NOT_BOOLEAN = VALUE_IS_NOT_BOOLEAN;
const VALUE_IS_NOT_ARRAY = (info) => `${info} is not array`;
exports.VALUE_IS_NOT_ARRAY = VALUE_IS_NOT_ARRAY;
