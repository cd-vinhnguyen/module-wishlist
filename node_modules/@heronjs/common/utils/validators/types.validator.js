"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isInterceptor = exports.isCacheableValue = exports.isObservable = exports.isPromise = exports.isSymbol = exports.isEmpty = exports.isNil = exports.isConstructor = exports.isString = exports.isNumeric = exports.isBoolean = exports.isFunction = exports.isUrlPath = exports.isPlainObject = exports.isObject = exports.isUndefined = void 0;
const reflector_1 = require("../../reflector");
const isUndefined = (obj) => typeof obj === 'undefined';
exports.isUndefined = isUndefined;
const isObject = (fn) => !(0, exports.isNil)(fn) && typeof fn === 'object';
exports.isObject = isObject;
const isPlainObject = (fn) => {
    if (!(0, exports.isObject)(fn)) {
        return false;
    }
    const proto = Object.getPrototypeOf(fn);
    if (proto === null) {
        return true;
    }
    const ctor = Object.prototype.hasOwnProperty.call(proto, 'constructor') &&
        proto.constructor;
    return (typeof ctor === 'function' &&
        ctor instanceof ctor &&
        Function.prototype.toString.call(ctor) ===
            Function.prototype.toString.call(Object));
};
exports.isPlainObject = isPlainObject;
const isUrlPath = (path) => path ? (path.charAt(0) !== '/' ? '/' + path : path) : '';
exports.isUrlPath = isUrlPath;
const isFunction = (fn) => !!fn && typeof fn === 'function';
exports.isFunction = isFunction;
const isBoolean = (fn) => !!fn && typeof fn === 'boolean';
exports.isBoolean = isBoolean;
const isNumeric = (fn) => !!fn && typeof fn === 'number';
exports.isNumeric = isNumeric;
const isString = (fn) => !!fn && typeof fn === 'string';
exports.isString = isString;
const isConstructor = (fn) => !!fn && fn === 'constructor';
exports.isConstructor = isConstructor;
const isNil = (obj) => (0, exports.isUndefined)(obj) || obj === null;
exports.isNil = isNil;
const isEmpty = (array) => !(array && array.length > 0);
exports.isEmpty = isEmpty;
const isSymbol = (fn) => !!fn && typeof fn === 'symbol';
exports.isSymbol = isSymbol;
const isPromise = (fn, key) => { var _a; return !!fn && ((_a = (0, reflector_1.__returnType)(fn, key)) === null || _a === void 0 ? void 0 : _a.name) === 'Promise'; };
exports.isPromise = isPromise;
const isObservable = (fn, key) => { var _a; return !!fn && ((_a = (0, reflector_1.__returnType)(fn, key)) === null || _a === void 0 ? void 0 : _a.name) === 'Observable'; };
exports.isObservable = isObservable;
const isCacheableValue = (value) => {
    return value !== null && value !== false && value !== undefined && (value === 'object' && Object.keys(value).length > 0) && (Array.isArray(value) && value.length > 0);
};
exports.isCacheableValue = isCacheableValue;
const isInterceptor = (object) => 'intercept' in object;
exports.isInterceptor = isInterceptor;
