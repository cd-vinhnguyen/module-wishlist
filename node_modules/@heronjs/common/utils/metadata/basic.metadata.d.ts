import { Any, AppendableMetadata, MethodContext, ParameterContext } from '../../consts';
/**
 * append new metadata for property of target
 * @param args
 */
export declare const __append: <T, R extends ParameterContext<any>>(args: AppendableMetadata<T, R>) => any;
/**
 * Handle and update method metadata
 * @param target
 * @param propertyKey
 * @param metaName
 * @param behavior
 * @param record
 */
export declare const _$handleMethodMetaChange: <Behavior, Record_1, Context extends MethodContext<any[], any>>(target: Any, propertyKey: string | symbol, metaName: string, behavior: Behavior, record: Record_1) => void;
/**
 * handle and update method parameters change
 * @param target
 * @param propertyKey
 * @param parameterIndex
 * @param metaName
 * @param type
 */
export declare const _$handleMethodParameterChange: <Behavior, Context extends MethodContext<any[], any>>(target: Any, propertyKey: string | symbol, parameterIndex: number, metaName: string, type: Behavior) => void;
