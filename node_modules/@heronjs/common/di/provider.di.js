"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.providerMeta = exports.Dao = exports.Repository = exports.Factory = exports.Provider = exports.ProviderInstanceType = void 0;
const enums_1 = require("../enums");
const inversify_1 = require("inversify");
const declarations_1 = require("../declarations");
const reflector_1 = require("../reflector");
var ProviderInstanceType;
(function (ProviderInstanceType) {
    ProviderInstanceType["NPO"] = "NPO";
    ProviderInstanceType["FPO"] = "FPO";
    ProviderInstanceType["RPO"] = "RPO";
    ProviderInstanceType["DPO"] = "DPO";
})(ProviderInstanceType = exports.ProviderInstanceType || (exports.ProviderInstanceType = {}));
const DEFAULT_PROVIDER_DEFINITION = { scope: enums_1.Scope.TRANSIENT };
/**
 * class dependency injection
 * @param {ProviderMetadata} meta
 * @returns {ClassDecorator}
 * @constructor
 */
const Provider = (meta) => {
    return target => {
        (0, reflector_1.__mixin)(target, {
            name: declarations_1.INSTANCE_TYPE,
            /**@typedef {ProviderInstanceType} */ refers: ProviderInstanceType.NPO
        });
        (0, reflector_1.__mixin)(target, { name: declarations_1.SELF_META, refers: meta ? meta : DEFAULT_PROVIDER_DEFINITION });
        (0, reflector_1.__annotation)((0, inversify_1.injectable)(), target);
    };
};
exports.Provider = Provider;
/**
 * factory dependency injection
 * @param {FactoryBinding} meta
 * @returns {ClassDecorator}
 * @constructor
 */
const Factory = (meta) => {
    return target => {
        (0, reflector_1.__mixin)(target, {
            name: declarations_1.INSTANCE_TYPE,
            /**@typedef {ProviderInstanceType} */ refers: ProviderInstanceType.FPO
        });
        (0, reflector_1.__mixin)(target, { name: declarations_1.SELF_META, refers: meta });
        (0, reflector_1.__annotation)((0, inversify_1.injectable)(), target);
    };
};
exports.Factory = Factory;
/**
 * repository dependency inject
 * @param {ProviderMetadata} meta
 * @returns {ClassDecorator}
 * @constructor
 */
const Repository = (meta) => {
    return target => {
        (0, reflector_1.__mixin)(target, { name: declarations_1.INSTANCE_TYPE, /**@type {ProviderInstanceType} */ refers: ProviderInstanceType.RPO });
        (0, reflector_1.__mixin)(target, { name: declarations_1.SELF_META, refers: meta ? meta : DEFAULT_PROVIDER_DEFINITION });
        (0, reflector_1.__annotation)((0, inversify_1.injectable)(), target);
    };
};
exports.Repository = Repository;
/**
 * DAO dependency injection
 * @param {ProviderMetadata} meta
 * @returns {ClassDecorator}
 * @constructor
 */
const Dao = (meta) => {
    return target => {
        (0, reflector_1.__mixin)(target, { name: declarations_1.INSTANCE_TYPE, /**@type {ProviderInstanceType} */ refers: ProviderInstanceType.DPO });
        (0, reflector_1.__mixin)(target, { name: declarations_1.SELF_META, refers: meta ? meta : DEFAULT_PROVIDER_DEFINITION });
        (0, reflector_1.__annotation)((0, inversify_1.injectable)(), target);
    };
};
exports.Dao = Dao;
/**
 * Provider metadata
 * @param {Any} target
 * @returns {T}
 */
const providerMeta = (target) => {
    return (0, reflector_1.__obtain)(declarations_1.SELF_META, target);
};
exports.providerMeta = providerMeta;
