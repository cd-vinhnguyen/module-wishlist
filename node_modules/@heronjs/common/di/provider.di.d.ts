import { Scope } from '../enums';
import { Any, Tokenize } from '../consts';
export declare type ProviderMetadata = Tokenize & {
    scope?: Scope;
};
export declare type FactoryBinding = Tokenize & {
    name: string;
    scope?: Scope;
};
export declare enum ProviderInstanceType {
    NPO = "NPO",
    FPO = "FPO",
    RPO = "RPO",
    DPO = "DPO"
}
export declare type Instance = {
    name?: string;
    isResolve: boolean;
    scope: Scope;
    instance: Any;
    holder: Any;
    meta?: Any;
    init?: <T>(target?: Instance) => T;
};
/**
 * class dependency injection
 * @param {ProviderMetadata} meta
 * @returns {ClassDecorator}
 * @constructor
 */
export declare const Provider: (meta?: ProviderMetadata) => ClassDecorator;
/**
 * factory dependency injection
 * @param {FactoryBinding} meta
 * @returns {ClassDecorator}
 * @constructor
 */
export declare const Factory: (meta?: FactoryBinding) => ClassDecorator;
/**
 * repository dependency inject
 * @param {ProviderMetadata} meta
 * @returns {ClassDecorator}
 * @constructor
 */
export declare const Repository: (meta?: ProviderMetadata) => ClassDecorator;
/**
 * DAO dependency injection
 * @param {ProviderMetadata} meta
 * @returns {ClassDecorator}
 * @constructor
 */
export declare const Dao: (meta?: ProviderMetadata) => ClassDecorator;
/**
 * Provider metadata
 * @param {Any} target
 * @returns {T}
 */
export declare const providerMeta: <T>(target: Any) => T;
