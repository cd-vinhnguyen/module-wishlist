/// <reference types="node" />
import { AdapterExtension, HttpAdapter, HttpAPIRoute, HttpBuildMetadata, HttpViewRoute } from '@heronjs/common/consts/adapters.consts';
import { Any, Interceptor, Resolver, SecureContext, Type } from '@heronjs/common';
import express from 'express';
import { ExpressErrorInterceptor, ExpressInterceptor } from '../interfaces';
import { SecureProperty } from '@heronjs/common/secure';
import { ServerOptions } from '@heronjs/common/consts';
import { HttpRequest, HttpResponse, Next } from '../types';
import { Server } from 'http';
export declare class ExpressAdapter implements HttpAdapter<ExpressInterceptor, Server> {
    #private;
    private readonly _gatekeeper?;
    private readonly _resolver?;
    constructor(_gatekeeper?: Type<SecureContext<express.Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>, SecureProperty>> | undefined, _resolver?: Resolver<any> | undefined);
    build: (meta: HttpBuildMetadata) => Promise<void>;
    listen: (opts?: ServerOptions) => Promise<Server>;
    interceptors: (...interceptors: Interceptor[] | Any[]) => Promise<void>;
    route: (routes: HttpAPIRoute<HttpRequest, HttpResponse, Next>) => Promise<void>;
    use: <Req, Res>(...middlewares: Any[]) => Promise<void>;
    view: <Req, Res, Next_1>(views: HttpViewRoute<Req, Res, Next_1>) => Promise<void>;
    errors: (error?: ExpressErrorInterceptor) => Promise<void>;
    get: () => Promise<Server>;
    engine: (_?: Any) => Promise<Any>;
    extension: (extension: AdapterExtension<Any, Any> | undefined) => Promise<Any>;
}
