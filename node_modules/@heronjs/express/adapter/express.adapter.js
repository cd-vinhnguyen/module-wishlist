"use strict";
var _ExpressAdapter_logger, _ExpressAdapter_http, _ExpressAdapter_engine, _ExpressAdapter_operators, _ExpressAdapter_functions, _ExpressAdapter_router, _ExpressAdapter_errorHandler, _ExpressAdapter_extensions, _ExpressAdapter_csm, _ExpressAdapter_rgkper, _ExpressAdapter_parserChain, _ExpressAdapter_securityChain, _ExpressAdapter_prefetch, _ExpressAdapter_gatekeeper, _ExpressAdapter_gatekeeperResolver, _ExpressAdapter_call;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressAdapter = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@heronjs/common");
const express_1 = tslib_1.__importStar(require("express"));
const processors_1 = require("../processors");
const body_parser_1 = tslib_1.__importDefault(require("body-parser"));
const cookie_parser_1 = tslib_1.__importDefault(require("cookie-parser"));
const helmet_1 = tslib_1.__importDefault(require("helmet"));
const errors_1 = require("@heronjs/common/errors");
const http_status_codes_1 = require("http-status-codes");
const http_1 = require("http");
const cors_1 = tslib_1.__importDefault(require("cors"));
const express_session_1 = tslib_1.__importDefault(require("express-session"));
class ExpressAdapter {
    constructor(_gatekeeper, _resolver) {
        this._gatekeeper = _gatekeeper;
        this._resolver = _resolver;
        _ExpressAdapter_logger.set(this, new common_1.Logger(ExpressAdapter.name));
        _ExpressAdapter_http.set(this, void 0);
        _ExpressAdapter_engine.set(this, void 0);
        _ExpressAdapter_operators.set(this, void 0);
        _ExpressAdapter_functions.set(this, void 0);
        _ExpressAdapter_router.set(this, void 0);
        _ExpressAdapter_errorHandler.set(this, void 0);
        _ExpressAdapter_extensions.set(this, void 0);
        _ExpressAdapter_csm.set(this, void 0);
        _ExpressAdapter_rgkper.set(this, void 0);
        _ExpressAdapter_parserChain.set(this, [body_parser_1.default.json({ limit: '8mb', type: ['application/json'] }),
            body_parser_1.default.urlencoded({
                extended: true,
                limit: '32mb',
                type: ['application/x-www-form-urlencoded']
            }),
            (0, cookie_parser_1.default)()]);
        _ExpressAdapter_securityChain.set(this, [(0, helmet_1.default)()]);
        this.build = (meta) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            if (meta && meta.metas) {
                const { actors, holder, type, prefix } = meta.metas;
                try {
                    for (var actors_1 = tslib_1.__asyncValues(actors), actors_1_1; actors_1_1 = yield actors_1.next(), !actors_1_1.done;) {
                        const actor = actors_1_1.value;
                        switch (type) {
                            case common_1.HttpRouteType.VIEW:
                                throw new common_1.NotSupportedError((0, common_1.FUNCTION_NOT_SUPPORTED)('HTML Render Routing'));
                            case common_1.HttpRouteType.API:
                                yield this.route(Object.assign(Object.assign({}, actor), { holder, prefix }));
                                break;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (actors_1_1 && !actors_1_1.done && (_a = actors_1.return)) yield _a.call(actors_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
        this.listen = (opts) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            let listenPort = 3000;
            try {
                if (opts) {
                    const { port, options } = opts;
                    if (port)
                        listenPort = port;
                    let defaultUri;
                    const deInterceptors = [];
                    if (options) {
                        const { uri, interceptors, globalError, cors: corsOptions, parsers, helmet: helmetProps, session: sessionProps } = options;
                        if (helmetProps) {
                            deInterceptors.unshift((0, helmet_1.default)(helmetProps));
                        }
                        else
                            deInterceptors.unshift(tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_securityChain, "f"));
                        if (corsOptions) {
                            deInterceptors.push((0, cors_1.default)(corsOptions));
                        }
                        if (sessionProps) {
                            deInterceptors.push((0, express_session_1.default)(sessionProps));
                        }
                        if (interceptors) {
                            deInterceptors.push(interceptors);
                        }
                        if (parsers) {
                            deInterceptors.push(parsers);
                        }
                        else
                            deInterceptors.push(tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_parserChain, "f"));
                        if (uri)
                            defaultUri = uri;
                        (deInterceptors && deInterceptors.length > 0) && tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f").use(deInterceptors);
                        globalError ? tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_errorHandler, globalError, "f") : tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_errorHandler, tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_operators, "f").errorHandler(), "f");
                    }
                    defaultUri ? tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f").use(defaultUri, tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_router, "f")) : tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f").use(tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_router, "f"));
                    yield this.errors(tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_errorHandler, "f"));
                }
                return tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_http, "f");
            }
            finally {
                tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_http, "f").listen(listenPort, () => {
                    tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_logger, "f").info((0, common_1.SERVER_STARTED_AT_PORT)(listenPort));
                });
            }
        });
        this.interceptors = (...interceptors) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            (interceptors && interceptors.filter(x => x !== undefined).length > 0) && tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f").use(interceptors);
        });
        this.route = (routes) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { route, prefix, caller, interceptors, holder, behaviors, guard } = routes;
            const { path, method, type, record, runner } = route;
            let cache;
            record && (cache = record.cache);
            const middlewares = () => {
                const inners = [];
                if (guard && tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_rgkper, "f") && guard[runner])
                    inners.push(tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_rgkper, "f"));
                if (cache)
                    inners.push(tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_prefetch, "f").call(this, cache));
                if (interceptors && interceptors.length > 0) {
                    inners.push(...interceptors);
                }
                return inners;
            };
            if (method && path && type) {
                tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_router, "f")[method](prefix + path, middlewares(), (req, res, next) => tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_call, "f").call(this, {
                    holder, context: {
                        http: { request: req, response: res, next }, caller,
                        input: route, behaviors
                    }
                }, cache).catch(error => next(error)));
            }
        });
        this.use = (...middlewares) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            (middlewares && middlewares.length > 0) && tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f").use(middlewares);
        });
        this.view = (views) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (views) {
                const { view, holder, caller } = views;
                if (view) {
                    const { path: uri, method } = view;
                    if (uri && method) {
                        tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_router, "f")[method](uri, (req, res, next) => tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_operators, "f").render(holder, Object.assign(Object.assign({}, view), { request: req, response: res, next }))(caller));
                    }
                }
            }
        });
        this.errors = (error) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const defaultHandler = tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_operators, "f").errorHandler();
            error ? tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f").use(error) : tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f").use(defaultHandler);
        });
        this.get = () => tslib_1.__awaiter(this, void 0, void 0, function* () { return tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_http, "f"); });
        this.engine = (_) => tslib_1.__awaiter(this, void 0, void 0, function* () { return tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f"); });
        this.extension = (extension) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_extensions, extension, "f");
            if (tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_extensions, "f")) {
                const { store, record, ext } = tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_extensions, "f");
                if (store && record) {
                    const { di } = ext;
                    tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_operators, "f") && tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_operators, "f").withExtensions(store, record, di);
                    tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_functions, "f") && tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_functions, "f").withExtensions(store, record, di);
                    tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_csm, store.get(), "f");
                }
            }
        });
        _ExpressAdapter_prefetch.set(this, (value) => {
            return (req, res, next) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_csm, "f")) {
                    try {
                        const key = (0, common_1.isString)(value.key) ? value.key : req.url || req.url;
                        if (key && (0, common_1.isString)(key)) {
                            const storedValue = yield tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_csm, "f").get(key);
                            if (storedValue) {
                                res.setHeader(common_1.DEFAULT_CACHE_HEADER, 'true');
                                return res.send(common_1.HttpResponseUtils.output(storedValue));
                            }
                        }
                    }
                    catch (e) {
                        return next(e);
                    }
                }
                return next();
            });
        });
        _ExpressAdapter_gatekeeper.set(this, () => {
            if (this._gatekeeper) {
                const gpk = new this._gatekeeper();
                const mw = Object.freeze((req, res, next) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    try {
                        let $auth;
                        if (this._resolver) {
                            const data = yield tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_gatekeeperResolver, "f").call(this, req, next, this._resolver);
                            $auth = gpk.OnGuard(data);
                        }
                        else
                            $auth = gpk.OnGuard(req);
                        return $auth.subscribe({
                            next: (data) => {
                                res.locals.authContext = data;
                                next();
                            },
                            error: (err) => next(err)
                        });
                    }
                    catch (e) {
                        next(e);
                    }
                }));
                return tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_rgkper, mw, "f");
            }
        });
        _ExpressAdapter_gatekeeperResolver.set(this, (req, next, resolver) => {
            const { http, resolve } = resolver;
            let data;
            if (http) {
                const [header, key] = http;
                switch (header) {
                    case 'header':
                        data = req.header(key);
                        break;
                    case 'cookie':
                        data = req.cookies[key];
                        break;
                    case 'session':
                        data = req.session[key];
                        break;
                }
                return resolve(data);
            }
            next(new errors_1.APIError(http_status_codes_1.StatusCodes.UNAUTHORIZED, 'invalid resolver'));
        });
        _ExpressAdapter_call.set(this, (callable, cache) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { holder, context } = callable;
            const { http, caller, input, behaviors } = context;
            const { request, response, next } = http;
            const directCall = behaviors === null || behaviors === void 0 ? void 0 : behaviors.find(predicate => predicate.type === common_1.HttpParameter.RESPONSE);
            const funcArgs = tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_operators, "f").parameterize(new Array(caller.length))(behaviors || [])(request, response);
            directCall ? tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_functions, "f").dispatchWithUri(holder)(caller, request, funcArgs, cache)
                : tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_operators, "f").dispatch(holder, Object.assign(Object.assign({}, input), { request, response, next }))(caller, funcArgs, cache);
        }));
        tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_engine, (0, express_1.default)(), "f");
        tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_router, (0, express_1.Router)(), "f");
        tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_http, (0, http_1.createServer)(tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_engine, "f")), "f");
        tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_operators, new processors_1.ExpressProcessor(), "f");
        tslib_1.__classPrivateFieldSet(this, _ExpressAdapter_functions, new processors_1.FunctionsProcessor(), "f");
        tslib_1.__classPrivateFieldGet(this, _ExpressAdapter_gatekeeper, "f").call(this);
    }
}
exports.ExpressAdapter = ExpressAdapter;
_ExpressAdapter_logger = new WeakMap(), _ExpressAdapter_http = new WeakMap(), _ExpressAdapter_engine = new WeakMap(), _ExpressAdapter_operators = new WeakMap(), _ExpressAdapter_functions = new WeakMap(), _ExpressAdapter_router = new WeakMap(), _ExpressAdapter_errorHandler = new WeakMap(), _ExpressAdapter_extensions = new WeakMap(), _ExpressAdapter_csm = new WeakMap(), _ExpressAdapter_rgkper = new WeakMap(), _ExpressAdapter_parserChain = new WeakMap(), _ExpressAdapter_securityChain = new WeakMap(), _ExpressAdapter_prefetch = new WeakMap(), _ExpressAdapter_gatekeeper = new WeakMap(), _ExpressAdapter_gatekeeperResolver = new WeakMap(), _ExpressAdapter_call = new WeakMap();
