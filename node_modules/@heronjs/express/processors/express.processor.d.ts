import { CacheValue, HttpParameter, ParameterContext, RequestRoute, ViewRoute } from '@heronjs/common';
import { ExpressErrorInterceptor } from '../interfaces';
import { HttpRequest, HttpResponse, Next } from '../types';
import { Any } from '@heronjs/common/consts';
import { IHttp } from '@heronjs/common/functionals';
import { AbstractProcessor } from './abstract.processor';
export declare class ExpressProcessor extends AbstractProcessor implements IHttp<HttpRequest, HttpResponse, Next> {
    #private;
    static COMMA_SYMBOL: string;
    constructor();
    render: <P, R>(thisArg: P, view?: ViewRoute<HttpRequest, HttpResponse, Next>) => (fn: () => Any, ...args: Any[]) => R;
    dispatch: <P, R>(thisArg: P, route?: RequestRoute<HttpRequest, HttpResponse, Next>) => (fn: () => Any, args: Any[], cache?: CacheValue<Any>) => R;
    parameterize: <I extends HttpRequest, O extends HttpResponse, M extends ParameterContext<HttpParameter>>(args: any[]) => (metas: M[]) => (req: I, res: O, ext?: Any) => any[];
    errorHandler: () => ExpressErrorInterceptor;
}
